#include <fs/core/search/drivers/sbfws/hff_run.hxx>

#include <fs/core/languages/fstrips/terms.hxx>
#include <fs/core/languages/fstrips/scopes.hxx>

//! MRJ: required to get _extract_constant_val() helper function
#include <fs/core/applicability/action_managers.hxx>

#include <fs/core/problem.hxx>
#include <fs/core/actions/actions.hxx>
#include <fs/core/utils/system.hxx>
#include <lapkt/tools/logging.hxx>

namespace fs0 { namespace bfws {

	HFFRun* HFFRun::create(const Problem& fs_problem, bool one_HA_per_fluent) {
		LPT_INFO("cout", "Peak mem. usage before HFF object construction: " << get_peak_memory_in_kb() << " kB.");
		LPT_INFO("cout", "Current mem. usage before HFF object construction: " << get_current_memory_in_kb() << " kB.");
		auto run = new HFFRun( fs_problem, one_HA_per_fluent);
		LPT_INFO("cout", "Peak mem. usage after HFF object construction: " << get_peak_memory_in_kb() << " kB.");
		LPT_INFO("cout", "Current mem. usage HFF object construction: " << get_current_memory_in_kb() << " kB.");
		return run;
	}
	

    HFFRun::HFFRun( const Problem& fs_problem, bool one_HA_per_fluent ) :
        _fs_problem( fs_problem ),
        _one_HA_per_fluent(one_HA_per_fluent)
    {
        _strips_task = std::make_shared< STRIPS_Problem >();
        compile_to_STRIPS();

        _search_problem = std::make_shared< Fwd_Search_Problem >( _strips_task.get() );
        _hff_heuristic = std::make_shared< H_Add_Rp_Fwd >( *_search_problem );
        _hff_heuristic->ignore_rp_h_value(true);
        _hff_heuristic->set_one_HA_per_fluent(_one_HA_per_fluent);
    }

    void
    HFFRun::compile_to_STRIPS( const fs::Formula* fs_pre, aptk::Fluent_Vec& pre ) {

        //! MRJ: Note: this code has been mostly lifted from the implementation of the match Tree
        //! so there's a pending refactoring here
        const fs::Conjunction* precondition = dynamic_cast<const fs::Conjunction*>(fs_pre);

        if (!precondition) { // If the precondition is not a conjunction, we cannot say much, so we consider the action as always potentially applicable
            throw std::runtime_error( "HFFRun: Action preconditions are not conjunctions!");
        }

        std::set<VariableIdx> referenced; // The state variables already made reference to by some precondition
        for (const fs::AtomicFormula* conjunct:precondition->getSubformulae()) {

            const fs::RelationalFormula* rel = dynamic_cast<const fs::RelationalFormula*>(conjunct);
            const fs::EQAtomicFormula* eq = dynamic_cast<const fs::EQAtomicFormula*>(conjunct);
            const fs::NEQAtomicFormula* neq = dynamic_cast<const fs::NEQAtomicFormula*>(conjunct);
            unsigned nestedness = conjunct->nestedness();
            std::vector<VariableIdx> all_relevant = fs::ScopeUtils::computeDirectScope(conjunct);

            // This implements a very rudimentary test that indexes only preconditions of the form X = x or X != x,
            // furthermore assuming that there are no two preconditions making reference to the same state variable
            if (nestedness > 0 || all_relevant.size() != 1 || !(eq || neq)) {
                throw std::runtime_error("HFFRun: Only Preconditions of the form X = T (or X = F) are supported");
            }

            const fs::StateVariable* sv = dynamic_cast<const fs::StateVariable*>(rel->lhs());
            if (!sv) {
                throw std::runtime_error( "HFFRun: left hand side of atomic formula is not a state variable");
            }


            VariableIdx relevant = all_relevant[0];
            //const std::vector<ObjectIdx>& values = info.getVariableObjects(relevant);

            if (!referenced.insert(relevant).second) {
                throw std::runtime_error("HFFRun: no two preconditions make reference to the same state variable");
            }

            if (eq) { // Prec is of the form X=x
                ObjectIdx value = _extract_constant_val(eq->lhs(), eq->rhs());
                pre.push_back(_atom_to_fluent[Atom(relevant,value)]);

            } else { // Prec is of the form X!=x
                throw std::runtime_error("HFFRun: Only Preconditions of the form X = T (or X = F) are supported");
            }
        }

    }

    void
    HFFRun::compile_to_STRIPS( const fs::ActionEffect* eff, aptk::Fluent_Vec& add, aptk::Fluent_Vec& del, aptk::Conditional_Effect_Vec& ceff ) {

        const fs::StateVariable* sv = dynamic_cast<const fs::StateVariable*>(eff->lhs());
        if (!sv) {
            throw std::runtime_error( "HFFRun: left hand side of effect is not a state variable");
        }
        if ( eff->condition()->is_tautology() ) {
            if ( eff->is_add() )
                add.push_back( _atom_to_fluent[ Atom( sv->getValue(), 1 )]);
            if ( eff->is_del() )
                del.push_back( _atom_to_fluent[ Atom( sv->getValue(), 0 )]);
            return;
        }

        aptk::Fluent_Vec ceff_pre;
        aptk::Fluent_Vec ceff_add;
        aptk::Fluent_Vec ceff_del;
        compile_to_STRIPS( eff->condition(), ceff_pre );
        if ( eff->is_add() )
            ceff_add.push_back( _atom_to_fluent[ Atom( sv->getValue(), 1 )]);
        if ( eff->is_del() )
            ceff_del.push_back( _atom_to_fluent[ Atom( sv->getValue(), 0 )]);
        aptk::Conditional_Effect* cond_eff = new aptk::Conditional_Effect(*_strips_task);
        cond_eff->define( ceff_pre, ceff_add, ceff_del );
        ceff.push_back(cond_eff);
    }

    void
    HFFRun::compile_to_STRIPS( ) {

        const ProblemInfo& info = ProblemInfo::getInstance();

        // Setup variables
        for ( VariableIdx x = 0; x < info.getNumVariables(); x++ ) {
            Atom x_t( x, 1 );
            Atom x_f( x, 0 );
            unsigned x_t_fluent = STRIPS_Problem::add_fluent( *_strips_task, info.getVariableName( x ) );
            std::string x_f_name = "~";
            x_f_name += info.getVariableName(x);
            unsigned x_f_fluent = STRIPS_Problem::add_fluent( *_strips_task, x_f_name );
            _atom_to_fluent[x_t] = x_t_fluent;
            _atom_to_fluent[x_f] = x_f_fluent;
            _fluent_to_atom.insert( std::make_pair( x_t_fluent, x_t));
            _fluent_to_atom.insert( std::make_pair( x_f_fluent, x_f));
        }

        // Setup Actions
        for ( const GroundAction* a : _fs_problem.getGroundActions() ) {
            aptk::Fluent_Vec pre; // Precondition
            aptk::Fluent_Vec add; // Adds
            aptk::Fluent_Vec del; // Dels
            aptk::Conditional_Effect_Vec ceff; // Conditional effects

            // Translates precondition formula, conjuncts end up in
            // pre vector
            compile_to_STRIPS( a->getPrecondition(), pre );

            // Translate effects
            for ( auto eff : a->getEffects() ) {
                compile_to_STRIPS( eff, add, del, ceff );
            }
            aptk::STRIPS_Problem::add_action( *_strips_task, a->getName(), pre, add, del, ceff );
        }
        //! MRJ: Super important step, it initialises the action -> precondition and action -> effect
        //! indices on which the heuristics rely for efficiency
        _strips_task->make_action_tables();


        aptk::Fluent_Vec	I;
        fs0::State s0 = _fs_problem.getInitialState();
        // initial state we can compile directly
        for ( unsigned x = 0; x < info.getNumVariables(); x++ ) {
            ObjectIdx v = s0.getValue(x);
            I.push_back( _atom_to_fluent[ Atom(x,v) ]);
        }


    	aptk::Fluent_Vec	G;
        compile_to_STRIPS( _fs_problem.getGoalConditions(), G );

    	// MRJ: And now we set the initial and goal states of prob
    	aptk::STRIPS_Problem::set_init( *_strips_task, I );
    	aptk::STRIPS_Problem::set_goal( *_strips_task, G );

		LPT_INFO( "heuristic", "PDDL problem description loaded: ");
		LPT_INFO( "heuristic", "\tDomain: " << _strips_task->domain_name() );
		LPT_INFO( "heuristic", "\tProblem: " << _strips_task->problem_name() );
		LPT_INFO( "heuristic", "\t#Actions: " << _strips_task->num_actions() );
		LPT_INFO( "heuristic", "\t#Fluents: " << _strips_task->num_fluents() );

		_strips_task->compute_edeletes();

	}


    aptk::State
    HFFRun::_convert_state(const fs0::State& state) {

        const ProblemInfo& info = ProblemInfo::getInstance();
        aptk::State s(task());
        for ( unsigned x = 0; x < info.getNumVariables(); x++ ) {
            ObjectIdx v = state.getValue(x);
            s.set( _atom_to_fluent[ Atom(x,v) ]);
        }

        return s;
    }

    /*
    RelevantAtomSet
    HFFRun::compute_r_ff(const fs0::State& s, const AtomIndex& atomidx) {
		aptk::Fluent_Vec rp_vec;
		aptk::Fluent_Set rp_set(task().num_fluents());

		compute_r_ff(_convert_state(s), rp_vec, rp_set);

		RelevantAtomSet atomset(&atomidx);

		for ( unsigned fl : rp_vec ) {
            auto it = _fluent_to_atom.find(fl);
            if ( it == _fluent_to_atom.end() )
                throw std::runtime_error("HFFRun: could not map APTK fluent index into FS atom!");
            atomset.mark( atomidx.to_index( it->second), RelevantAtomSet::STATUS::UNREACHED, false );
        }
		return atomset;
	}

    void
    HFFRun::compute_r_ff(const aptk::State& s, aptk::Fluent_Vec& rp_vec, aptk::Fluent_Set& rp_set) {

		std::vector<aptk::Action_Idx> po;
		std::vector<aptk::Action_Idx> relaxed_plan;


		// Compute the relaxed plan itself
		float h = 0;
		_hff_heuristic->ignore_rp_h_value(true);
		_hff_heuristic->eval(s, h, po, relaxed_plan);
		LPT_INFO("heuristic", "relaxed_plan size: "<< relaxed_plan.size() );

		for (auto action_i:relaxed_plan) {
			const aptk::Action* a = task().actions()[action_i];

			// Add Conditional Effects
			if(!a->ceff_vec().empty()) {
				for( unsigned i = 0; i < a->ceff_vec().size(); i++ ){
					aptk::Conditional_Effect* ce = a->ceff_vec()[i];
					for (auto p : ce->add_vec()) {
						if ( ! rp_set.isset( p ) ){
							rp_vec.push_back( p );
							rp_set.set( p );
							//LPT_INFO( "heuristic", task().fluents()[add[i]]->signature() );
						}
					}
				}
			}

			const aptk::Fluent_Vec& add = a->add_vec();

			//LPT_INFO( "heuristic", task().actions()[action_i]->signature() );
			for (unsigned i = 0; i < add.size(); i++) {
				if ( ! rp_set.isset( add[i] ) ) {
					rp_vec.push_back( add[i] );
					rp_set.set( add[i] );
					//LPT_INFO( "heuristic", task().fluents()[add[i]]->signature() );
				}
			}
		}
	}
	*/
}}
