# This SConstruct file is automatically moved to the directory where the generated
# instance-specific problem data resides during the process of generating the executable solver.

import os, sys
sys.path.append('../..')

HOME = os.path.expanduser("~")

# read variables from the cache, a user's custom.py file or command line arguments
vars = Variables(['variables.cache', 'custom.py'], ARGUMENTS)
vars.Add(BoolVariable('debug', 'Whether this is a debug build', 'no'))
vars.Add(BoolVariable('edebug', 'Extreme debug', 'no'))
vars.Add(EnumVariable('default_compiler', 'Preferred compiler', 'clang++', allowed_values=('g++', 'clang++')))
vars.Add(PathVariable('fs', 'Path where the FS library is installed', os.getenv('FS_PATH', ''), PathVariable.PathIsDir))
env = Environment(variables=vars, ENV=os.environ)
env['CXX'] = os.environ.get('CXX', env['default_compiler'])

env.Append( LINKFLAGS = ['-lstdc++' ] )  # Seems to be necessary to avoid compatibility issues at linking time...

if env['edebug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG', '-DEDEBUG' ] )
	fs_libname = 'fs-edebug'
	exe_name = 'solver.edebug.bin'
elif env['debug']:
	env.Append( CCFLAGS = ['-g', '-DDEBUG' ] )
	fs_libname = 'fs-debug'
	exe_name = 'solver.debug.bin'
else:
	env.Append( CCFLAGS = ['-g', '-O3', '-DNDEBUG' ] )
	fs_libname = 'fs'
	exe_name = 'solver.bin'

env.ParseConfig( 'PKG_CONFIG_PATH="{}" pkg-config --cflags --libs {}'.format(env['fs'], fs_libname))
#print('PKG_CONFIG_PATH="{}" pkg-config --cflags --libs {}'.format(env['fs'], fs_libname))


# Header and library directories.
# We include pre-specified '~/local/include' and '~/local/lib' directories in case local versions of some libraries (e.g. Boost) are needed
include_paths = ['.']
isystem_paths = [HOME + '/local/include']
lib_paths = [HOME + '/local/lib']

env.Append(CPPPATH = [ os.path.abspath(p) for p in include_paths ])
env.Append(CCFLAGS = ['-isystem' + os.path.abspath(p) for p in isystem_paths])
env.Append(LINKFLAGS = ['-Wl,--no-as-needed'])


src_objs = [ env.Object(s) for s in Glob('./*.cxx') ] # This will include both the main.cxx and the generated code for the particular instance

# Note: order matters. If A depends on B, A should go _before_ B.

env.Program(exe_name, src_objs )
