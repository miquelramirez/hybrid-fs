# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .listener import FunctionalStripsListener
    from .visitor import FunctionalStripsVisitor
else:
    from listener import FunctionalStripsListener
    from visitor import FunctionalStripsVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0096")
        buf.write("\u049e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\3\2\3\2\5\2\u00c5\n\2\3\3\3\3\3\3\3\3")
        buf.write("\5\3\u00cb\n\3\3\3\5\3\u00ce\n\3\3\3\5\3\u00d1\n\3\3\3")
        buf.write("\5\3\u00d4\n\3\3\3\5\3\u00d7\n\3\3\3\5\3\u00da\n\3\3\3")
        buf.write("\7\3\u00dd\n\3\f\3\16\3\u00e0\13\3\3\3\3\3\3\4\3\4\3\4")
        buf.write("\7\4\u00e7\n\4\f\4\16\4\u00ea\13\4\3\4\3\4\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\6\6\u00f6\n\6\r\6\16\6\u00f7\3\6")
        buf.write("\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\5\b\u0104\n\b\3\t")
        buf.write("\3\t\5\t\u0108\n\t\3\n\7\n\u010b\n\n\f\n\16\n\u010e\13")
        buf.write("\n\3\13\3\13\6\13\u0112\n\13\r\13\16\13\u0113\3\13\3\13")
        buf.write("\5\13\u0118\n\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\6\r\u0122")
        buf.write("\n\r\r\r\16\r\u0123\3\r\3\r\3\r\5\r\u0129\n\r\3\16\3\16")
        buf.write("\5\16\u012d\n\16\3\17\3\17\3\17\7\17\u0132\n\17\f\17\16")
        buf.write("\17\u0135\13\17\3\17\3\17\3\20\6\20\u013a\n\20\r\20\16")
        buf.write("\20\u013b\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\7\24\u0150")
        buf.write("\n\24\f\24\16\24\u0153\13\24\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\26\3\26\3\27\7\27\u015f\n\27\f\27\16\27\u0162")
        buf.write("\13\27\3\27\6\27\u0165\n\27\r\27\16\27\u0166\3\27\7\27")
        buf.write("\u016a\n\27\f\27\16\27\u016d\13\27\5\27\u016f\n\27\3\30")
        buf.write("\6\30\u0172\n\30\r\30\16\30\u0173\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\5\31\u017f\n\31\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\36\3\36")
        buf.write("\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!\5!\u01ae\n!\3\"\3\"")
        buf.write("\3\"\3\"\7\"\u01b4\n\"\f\"\16\"\u01b7\13\"\3\"\3\"\3\"")
        buf.write("\3\"\7\"\u01bd\n\"\f\"\16\"\u01c0\13\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"")
        buf.write("\u01e0\n\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3%\3%\3")
        buf.write("%\7%\u01f1\n%\f%\16%\u01f4\13%\3%\3%\3&\3&\3&\3&\3&\5")
        buf.write("&\u01fd\n&\3\'\3\'\3\'\7\'\u0202\n\'\f\'\16\'\u0205\13")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\5\'\u0214\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)")
        buf.write("\3)\3)\3*\3*\3*\7*\u0228\n*\f*\16*\u022b\13*\3*\3*\5*")
        buf.write("\u022f\n*\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u024a\n,\3-\3-\3-\3")
        buf.write("-\3-\3-\5-\u0252\n-\3-\3-\3-\3-\5-\u0258\n-\5-\u025a\n")
        buf.write("-\3.\3.\3.\3.\7.\u0260\n.\f.\16.\u0263\13.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\5.\u026e\n.\3/\3/\3/\3/\5/\u0274\n/\3")
        buf.write("/\3/\3/\5/\u0279\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\5\60\u0287\n\60\3\61\3\61\3")
        buf.write("\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64")
        buf.write("\5\64\u0296\n\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u02a7\n\65")
        buf.write("\3\66\3\66\3\66\3\66\3\66\5\66\u02ae\n\66\3\67\3\67\3")
        buf.write("\67\3\67\5\67\u02b4\n\67\38\38\38\38\58\u02ba\n8\39\3")
        buf.write("9\39\79\u02bf\n9\f9\169\u02c2\139\39\39\3:\3:\3:\7:\u02c9")
        buf.write("\n:\f:\16:\u02cc\13:\3:\3:\5:\u02d0\n:\3;\3;\3;\3;\3;")
        buf.write("\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u02e1\n;\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\5<\u02fb\n<\3=\3=\3=\7=\u0300\n=\f=\16=\u0303")
        buf.write("\13=\3=\3=\5=\u0307\n=\3>\3>\3?\3?\3@\3@\3A\3A\3B\3B\3")
        buf.write("C\3C\3D\3D\3D\6D\u0318\nD\rD\16D\u0319\3D\3D\3D\3D\3D")
        buf.write("\5D\u0321\nD\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u032f")
        buf.write("\nE\3F\3F\3G\3G\5G\u0335\nG\3H\3H\3H\7H\u033a\nH\fH\16")
        buf.write("H\u033d\13H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H")
        buf.write("\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0355\nH\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0369\nI\3J\3")
        buf.write("J\3J\3J\3J\3J\3K\3K\3K\3K\3K\3K\3K\5K\u0378\nK\3K\3K\3")
        buf.write("K\3K\5K\u037e\nK\3L\3L\3L\3L\3L\5L\u0385\nL\3L\5L\u0388")
        buf.write("\nL\3L\3L\3L\7L\u038d\nL\fL\16L\u0390\13L\3L\3L\3M\3M")
        buf.write("\3M\5M\u0397\nM\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3P\3P\3")
        buf.write("P\3P\3P\3Q\3Q\3Q\6Q\u03ab\nQ\rQ\16Q\u03ac\3Q\3Q\3R\3R")
        buf.write("\3R\3R\3R\3R\3R\3R\3R\3R\3R\3S\3S\3S\7S\u03bf\nS\fS\16")
        buf.write("S\u03c2\13S\3S\3S\3T\3T\3T\5T\u03c9\nT\3U\3U\3U\7U\u03ce")
        buf.write("\nU\fU\16U\u03d1\13U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V")
        buf.write("\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u03e8\nV\3W\3W\3W\3")
        buf.write("W\3W\3W\5W\u03f0\nW\3X\3X\3X\7X\u03f5\nX\fX\16X\u03f8")
        buf.write("\13X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\7[\u0409")
        buf.write("\n[\f[\16[\u040c\13[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[")
        buf.write("\3[\5[\u041a\n[\3[\3[\3[\3[\6[\u0420\n[\r[\16[\u0421\5")
        buf.write("[\u0424\n[\3\\\3\\\3\\\3\\\3\\\3\\\3]\3]\3^\3^\3^\3^\3")
        buf.write("^\3^\3^\3^\3^\3^\3^\3^\5^\u043a\n^\3_\3_\3_\3_\3_\3`\3")
        buf.write("`\3`\3`\3`\3a\3a\3a\6a\u0449\na\ra\16a\u044a\3a\3a\3a")
        buf.write("\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3")
        buf.write("a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\6a\u0495")
        buf.write("\na\ra\16a\u0496\3a\3a\3a\5a\u049c\na\3a\2\2b\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8")
        buf.write("\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba")
        buf.write("\u00bc\u00be\u00c0\2\f\3\2`a\3\2&\'\5\2\16\16**.\62\4")
        buf.write("\2\16\16\63;\4\2**..\4\2\36\36<?\4\2,,@C\3\2BC\4\2\36")
        buf.write("\36>?\3\2PQ\u04c6\2\u00c4\3\2\2\2\4\u00c6\3\2\2\2\6\u00e3")
        buf.write("\3\2\2\2\b\u00ed\3\2\2\2\n\u00f2\3\2\2\2\f\u00fb\3\2\2")
        buf.write("\2\16\u0103\3\2\2\2\20\u0107\3\2\2\2\22\u010c\3\2\2\2")
        buf.write("\24\u0117\3\2\2\2\26\u0119\3\2\2\2\30\u0128\3\2\2\2\32")
        buf.write("\u012c\3\2\2\2\34\u012e\3\2\2\2\36\u0139\3\2\2\2 \u0140")
        buf.write("\3\2\2\2\"\u0145\3\2\2\2$\u0147\3\2\2\2&\u014c\3\2\2\2")
        buf.write("(\u0156\3\2\2\2*\u015b\3\2\2\2,\u016e\3\2\2\2.\u0171\3")
        buf.write("\2\2\2\60\u017e\3\2\2\2\62\u0180\3\2\2\2\64\u018a\3\2")
        buf.write("\2\2\66\u0195\3\2\2\28\u019f\3\2\2\2:\u01a1\3\2\2\2<\u01a3")
        buf.write("\3\2\2\2>\u01a5\3\2\2\2@\u01ad\3\2\2\2B\u01df\3\2\2\2")
        buf.write("D\u01e1\3\2\2\2F\u01e7\3\2\2\2H\u01ed\3\2\2\2J\u01fc\3")
        buf.write("\2\2\2L\u0213\3\2\2\2N\u0215\3\2\2\2P\u021f\3\2\2\2R\u022e")
        buf.write("\3\2\2\2T\u0230\3\2\2\2V\u0249\3\2\2\2X\u0259\3\2\2\2")
        buf.write("Z\u026d\3\2\2\2\\\u0278\3\2\2\2^\u0286\3\2\2\2`\u0288")
        buf.write("\3\2\2\2b\u028a\3\2\2\2d\u028c\3\2\2\2f\u0295\3\2\2\2")
        buf.write("h\u02a6\3\2\2\2j\u02ad\3\2\2\2l\u02b3\3\2\2\2n\u02b9\3")
        buf.write("\2\2\2p\u02bb\3\2\2\2r\u02cf\3\2\2\2t\u02e0\3\2\2\2v\u02fa")
        buf.write("\3\2\2\2x\u0306\3\2\2\2z\u0308\3\2\2\2|\u030a\3\2\2\2")
        buf.write("~\u030c\3\2\2\2\u0080\u030e\3\2\2\2\u0082\u0310\3\2\2")
        buf.write("\2\u0084\u0312\3\2\2\2\u0086\u0320\3\2\2\2\u0088\u032e")
        buf.write("\3\2\2\2\u008a\u0330\3\2\2\2\u008c\u0334\3\2\2\2\u008e")
        buf.write("\u0354\3\2\2\2\u0090\u0368\3\2\2\2\u0092\u036a\3\2\2\2")
        buf.write("\u0094\u037d\3\2\2\2\u0096\u037f\3\2\2\2\u0098\u0396\3")
        buf.write("\2\2\2\u009a\u0398\3\2\2\2\u009c\u039d\3\2\2\2\u009e\u03a2")
        buf.write("\3\2\2\2\u00a0\u03a7\3\2\2\2\u00a2\u03b0\3\2\2\2\u00a4")
        buf.write("\u03bb\3\2\2\2\u00a6\u03c8\3\2\2\2\u00a8\u03ca\3\2\2\2")
        buf.write("\u00aa\u03e7\3\2\2\2\u00ac\u03ef\3\2\2\2\u00ae\u03f1\3")
        buf.write("\2\2\2\u00b0\u03fb\3\2\2\2\u00b2\u0400\3\2\2\2\u00b4\u0423")
        buf.write("\3\2\2\2\u00b6\u0425\3\2\2\2\u00b8\u042b\3\2\2\2\u00ba")
        buf.write("\u0439\3\2\2\2\u00bc\u043b\3\2\2\2\u00be\u0440\3\2\2\2")
        buf.write("\u00c0\u049b\3\2\2\2\u00c2\u00c5\5\4\3\2\u00c3\u00c5\5")
        buf.write("\u0096L\2\u00c4\u00c2\3\2\2\2\u00c4\u00c3\3\2\2\2\u00c5")
        buf.write("\3\3\2\2\2\u00c6\u00c7\7\3\2\2\u00c7\u00c8\7\4\2\2\u00c8")
        buf.write("\u00ca\5\b\5\2\u00c9\u00cb\5\n\6\2\u00ca\u00c9\3\2\2\2")
        buf.write("\u00ca\u00cb\3\2\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ce\5")
        buf.write("\f\7\2\u00cd\u00cc\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d0")
        buf.write("\3\2\2\2\u00cf\u00d1\5$\23\2\u00d0\u00cf\3\2\2\2\u00d0")
        buf.write("\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2\u00d4\5&\24\2")
        buf.write("\u00d3\u00d2\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d6\3")
        buf.write("\2\2\2\u00d5\u00d7\5\34\17\2\u00d6\u00d5\3\2\2\2\u00d6")
        buf.write("\u00d7\3\2\2\2\u00d7\u00d9\3\2\2\2\u00d8\u00da\5\6\4\2")
        buf.write("\u00d9\u00d8\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00de\3")
        buf.write("\2\2\2\u00db\u00dd\5\60\31\2\u00dc\u00db\3\2\2\2\u00dd")
        buf.write("\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2")
        buf.write("\u00df\u00e1\3\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e2\7")
        buf.write("\5\2\2\u00e2\5\3\2\2\2\u00e3\u00e4\7\3\2\2\u00e4\u00e8")
        buf.write("\7\6\2\2\u00e5\u00e7\5\36\20\2\u00e6\u00e5\3\2\2\2\u00e7")
        buf.write("\u00ea\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2")
        buf.write("\u00e9\u00eb\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ec\7")
        buf.write("\5\2\2\u00ec\7\3\2\2\2\u00ed\u00ee\7\3\2\2\u00ee\u00ef")
        buf.write("\7\7\2\2\u00ef\u00f0\7`\2\2\u00f0\u00f1\7\5\2\2\u00f1")
        buf.write("\t\3\2\2\2\u00f2\u00f3\7\3\2\2\u00f3\u00f5\7\b\2\2\u00f4")
        buf.write("\u00f6\7_\2\2\u00f5\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2")
        buf.write("\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3")
        buf.write("\2\2\2\u00f9\u00fa\7\5\2\2\u00fa\13\3\2\2\2\u00fb\u00fc")
        buf.write("\7\3\2\2\u00fc\u00fd\7\t\2\2\u00fd\u00fe\5\24\13\2\u00fe")
        buf.write("\u00ff\7\5\2\2\u00ff\r\3\2\2\2\u0100\u0104\7\n\2\2\u0101")
        buf.write("\u0104\7\13\2\2\u0102\u0104\7\f\2\2\u0103\u0100\3\2\2")
        buf.write("\2\u0103\u0101\3\2\2\2\u0103\u0102\3\2\2\2\u0104\17\3")
        buf.write("\2\2\2\u0105\u0108\5\16\b\2\u0106\u0108\7\r\2\2\u0107")
        buf.write("\u0105\3\2\2\2\u0107\u0106\3\2\2\2\u0108\21\3\2\2\2\u0109")
        buf.write("\u010b\7`\2\2\u010a\u0109\3\2\2\2\u010b\u010e\3\2\2\2")
        buf.write("\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\23\3\2")
        buf.write("\2\2\u010e\u010c\3\2\2\2\u010f\u0118\5\22\n\2\u0110\u0112")
        buf.write("\5\26\f\2\u0111\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113")
        buf.write("\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115\u0116\5\22\n\2\u0116\u0118\3\2\2\2\u0117\u010f")
        buf.write("\3\2\2\2\u0117\u0111\3\2\2\2\u0118\25\3\2\2\2\u0119\u011a")
        buf.write("\7`\2\2\u011a\u011b\5\22\n\2\u011b\u011c\7\16\2\2\u011c")
        buf.write("\u011d\5\30\r\2\u011d\27\3\2\2\2\u011e\u011f\7\3\2\2\u011f")
        buf.write("\u0121\7\17\2\2\u0120\u0122\5\32\16\2\u0121\u0120\3\2")
        buf.write("\2\2\u0122\u0123\3\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124")
        buf.write("\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0126\7\5\2\2\u0126")
        buf.write("\u0129\3\2\2\2\u0127\u0129\5\32\16\2\u0128\u011e\3\2\2")
        buf.write("\2\u0128\u0127\3\2\2\2\u0129\31\3\2\2\2\u012a\u012d\7")
        buf.write("`\2\2\u012b\u012d\5\20\t\2\u012c\u012a\3\2\2\2\u012c\u012b")
        buf.write("\3\2\2\2\u012d\33\3\2\2\2\u012e\u012f\7\3\2\2\u012f\u0133")
        buf.write("\7\20\2\2\u0130\u0132\5\36\20\2\u0131\u0130\3\2\2\2\u0132")
        buf.write("\u0135\3\2\2\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0136\3\2\2\2\u0135\u0133\3\2\2\2\u0136\u0137\7")
        buf.write("\5\2\2\u0137\35\3\2\2\2\u0138\u013a\5 \21\2\u0139\u0138")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u0139\3\2\2\2\u013b")
        buf.write("\u013c\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013e\7\16\2")
        buf.write("\2\u013e\u013f\5\32\16\2\u013f\37\3\2\2\2\u0140\u0141")
        buf.write("\7\3\2\2\u0141\u0142\5\"\22\2\u0142\u0143\5,\27\2\u0143")
        buf.write("\u0144\7\5\2\2\u0144!\3\2\2\2\u0145\u0146\t\2\2\2\u0146")
        buf.write("#\3\2\2\2\u0147\u0148\7\3\2\2\u0148\u0149\7\21\2\2\u0149")
        buf.write("\u014a\5\24\13\2\u014a\u014b\7\5\2\2\u014b%\3\2\2\2\u014c")
        buf.write("\u014d\7\3\2\2\u014d\u0151\7\22\2\2\u014e\u0150\5(\25")
        buf.write("\2\u014f\u014e\3\2\2\2\u0150\u0153\3\2\2\2\u0151\u014f")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\3\2\2\2\u0153")
        buf.write("\u0151\3\2\2\2\u0154\u0155\7\5\2\2\u0155\'\3\2\2\2\u0156")
        buf.write("\u0157\7\3\2\2\u0157\u0158\5*\26\2\u0158\u0159\5,\27\2")
        buf.write("\u0159\u015a\7\5\2\2\u015a)\3\2\2\2\u015b\u015c\t\2\2")
        buf.write("\2\u015c+\3\2\2\2\u015d\u015f\7d\2\2\u015e\u015d\3\2\2")
        buf.write("\2\u015f\u0162\3\2\2\2\u0160\u015e\3\2\2\2\u0160\u0161")
        buf.write("\3\2\2\2\u0161\u016f\3\2\2\2\u0162\u0160\3\2\2\2\u0163")
        buf.write("\u0165\5.\30\2\u0164\u0163\3\2\2\2\u0165\u0166\3\2\2\2")
        buf.write("\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016b\3")
        buf.write("\2\2\2\u0168\u016a\7d\2\2\u0169\u0168\3\2\2\2\u016a\u016d")
        buf.write("\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u0160\3\2\2\2")
        buf.write("\u016e\u0164\3\2\2\2\u016f-\3\2\2\2\u0170\u0172\7d\2\2")
        buf.write("\u0171\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0171\3")
        buf.write("\2\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0176")
        buf.write("\7\16\2\2\u0176\u0177\5\32\16\2\u0177/\3\2\2\2\u0178\u017f")
        buf.write("\5\62\32\2\u0179\u017f\5\66\34\2\u017a\u017f\5V,\2\u017b")
        buf.write("\u017f\5d\63\2\u017c\u017f\5\64\33\2\u017d\u017f\5N(\2")
        buf.write("\u017e\u0178\3\2\2\2\u017e\u0179\3\2\2\2\u017e\u017a\3")
        buf.write("\2\2\2\u017e\u017b\3\2\2\2\u017e\u017c\3\2\2\2\u017e\u017d")
        buf.write("\3\2\2\2\u017f\61\3\2\2\2\u0180\u0181\7\3\2\2\u0181\u0182")
        buf.write("\7\23\2\2\u0182\u0183\58\35\2\u0183\u0184\7\24\2\2\u0184")
        buf.write("\u0185\7\3\2\2\u0185\u0186\5,\27\2\u0186\u0187\7\5\2\2")
        buf.write("\u0187\u0188\5> \2\u0188\u0189\7\5\2\2\u0189\63\3\2\2")
        buf.write("\2\u018a\u018b\7\3\2\2\u018b\u018c\7\25\2\2\u018c\u018d")
        buf.write("\5:\36\2\u018d\u018e\7\24\2\2\u018e\u018f\7\3\2\2\u018f")
        buf.write("\u0190\5,\27\2\u0190\u0191\7\5\2\2\u0191\u0192\7\26\2")
        buf.write("\2\u0192\u0193\5B\"\2\u0193\u0194\7\5\2\2\u0194\65\3\2")
        buf.write("\2\2\u0195\u0196\7\3\2\2\u0196\u0197\7\27\2\2\u0197\u0198")
        buf.write("\5<\37\2\u0198\u0199\7\24\2\2\u0199\u019a\7\3\2\2\u019a")
        buf.write("\u019b\5,\27\2\u019b\u019c\7\5\2\2\u019c\u019d\5> \2\u019d")
        buf.write("\u019e\7\5\2\2\u019e\67\3\2\2\2\u019f\u01a0\t\2\2\2\u01a0")
        buf.write("9\3\2\2\2\u01a1\u01a2\7`\2\2\u01a2;\3\2\2\2\u01a3\u01a4")
        buf.write("\t\2\2\2\u01a4=\3\2\2\2\u01a5\u01a6\7b\2\2\u01a6\u01a7")
        buf.write("\5@!\2\u01a7\u01a8\7c\2\2\u01a8\u01a9\5r:\2\u01a9?\3\2")
        buf.write("\2\2\u01aa\u01ab\7\3\2\2\u01ab\u01ae\7\5\2\2\u01ac\u01ae")
        buf.write("\5B\"\2\u01ad\u01aa\3\2\2\2\u01ad\u01ac\3\2\2\2\u01ae")
        buf.write("A\3\2\2\2\u01af\u01e0\5H%\2\u01b0\u01b1\7\3\2\2\u01b1")
        buf.write("\u01b5\7\30\2\2\u01b2\u01b4\5B\"\2\u01b3\u01b2\3\2\2\2")
        buf.write("\u01b4\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3")
        buf.write("\2\2\2\u01b6\u01b8\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01e0")
        buf.write("\7\5\2\2\u01b9\u01ba\7\3\2\2\u01ba\u01be\7\31\2\2\u01bb")
        buf.write("\u01bd\5B\"\2\u01bc\u01bb\3\2\2\2\u01bd\u01c0\3\2\2\2")
        buf.write("\u01be\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\3")
        buf.write("\2\2\2\u01c0\u01be\3\2\2\2\u01c1\u01e0\7\5\2\2\u01c2\u01c3")
        buf.write("\7\3\2\2\u01c3\u01c4\7\32\2\2\u01c4\u01c5\5B\"\2\u01c5")
        buf.write("\u01c6\7\5\2\2\u01c6\u01e0\3\2\2\2\u01c7\u01c8\7\3\2\2")
        buf.write("\u01c8\u01c9\7\33\2\2\u01c9\u01ca\5B\"\2\u01ca\u01cb\5")
        buf.write("B\"\2\u01cb\u01cc\7\5\2\2\u01cc\u01e0\3\2\2\2\u01cd\u01ce")
        buf.write("\7\3\2\2\u01ce\u01cf\7\34\2\2\u01cf\u01d0\7\3\2\2\u01d0")
        buf.write("\u01d1\5,\27\2\u01d1\u01d2\7\5\2\2\u01d2\u01d3\5B\"\2")
        buf.write("\u01d3\u01d4\7\5\2\2\u01d4\u01e0\3\2\2\2\u01d5\u01d6\7")
        buf.write("\3\2\2\u01d6\u01d7\7\35\2\2\u01d7\u01d8\7\3\2\2\u01d8")
        buf.write("\u01d9\5,\27\2\u01d9\u01da\7\5\2\2\u01da\u01db\5B\"\2")
        buf.write("\u01db\u01dc\7\5\2\2\u01dc\u01e0\3\2\2\2\u01dd\u01e0\5")
        buf.write("F$\2\u01de\u01e0\5D#\2\u01df\u01af\3\2\2\2\u01df\u01b0")
        buf.write("\3\2\2\2\u01df\u01b9\3\2\2\2\u01df\u01c2\3\2\2\2\u01df")
        buf.write("\u01c7\3\2\2\2\u01df\u01cd\3\2\2\2\u01df\u01d5\3\2\2\2")
        buf.write("\u01df\u01dd\3\2\2\2\u01df\u01de\3\2\2\2\u01e0C\3\2\2")
        buf.write("\2\u01e1\u01e2\7\3\2\2\u01e2\u01e3\7\36\2\2\u01e3\u01e4")
        buf.write("\5J&\2\u01e4\u01e5\5J&\2\u01e5\u01e6\7\5\2\2\u01e6E\3")
        buf.write("\2\2\2\u01e7\u01e8\7\3\2\2\u01e8\u01e9\5\u0080A\2\u01e9")
        buf.write("\u01ea\5f\64\2\u01ea\u01eb\5f\64\2\u01eb\u01ec\7\5\2\2")
        buf.write("\u01ecG\3\2\2\2\u01ed\u01ee\7\3\2\2\u01ee\u01f2\5*\26")
        buf.write("\2\u01ef\u01f1\5J&\2\u01f0\u01ef\3\2\2\2\u01f1\u01f4\3")
        buf.write("\2\2\2\u01f2\u01f0\3\2\2\2\u01f2\u01f3\3\2\2\2\u01f3\u01f5")
        buf.write("\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f5\u01f6\7\5\2\2\u01f6")
        buf.write("I\3\2\2\2\u01f7\u01fd\7`\2\2\u01f8\u01fd\7e\2\2\u01f9")
        buf.write("\u01fd\7d\2\2\u01fa\u01fd\7\37\2\2\u01fb\u01fd\5L\'\2")
        buf.write("\u01fc\u01f7\3\2\2\2\u01fc\u01f8\3\2\2\2\u01fc\u01f9\3")
        buf.write("\2\2\2\u01fc\u01fa\3\2\2\2\u01fc\u01fb\3\2\2\2\u01fdK")
        buf.write("\3\2\2\2\u01fe\u01ff\7\3\2\2\u01ff\u0203\5\"\22\2\u0200")
        buf.write("\u0202\5J&\2\u0201\u0200\3\2\2\2\u0202\u0205\3\2\2\2\u0203")
        buf.write("\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0206\3\2\2\2")
        buf.write("\u0205\u0203\3\2\2\2\u0206\u0207\7\5\2\2\u0207\u0214\3")
        buf.write("\2\2\2\u0208\u0209\7\3\2\2\u0209\u020a\5z>\2\u020a\u020b")
        buf.write("\5J&\2\u020b\u020c\5J&\2\u020c\u020d\7\5\2\2\u020d\u0214")
        buf.write("\3\2\2\2\u020e\u020f\7\3\2\2\u020f\u0210\5|?\2\u0210\u0211")
        buf.write("\5J&\2\u0211\u0212\7\5\2\2\u0212\u0214\3\2\2\2\u0213\u01fe")
        buf.write("\3\2\2\2\u0213\u0208\3\2\2\2\u0213\u020e\3\2\2\2\u0214")
        buf.write("M\3\2\2\2\u0215\u0216\7\3\2\2\u0216\u0217\7 \2\2\u0217")
        buf.write("\u0218\58\35\2\u0218\u0219\7\24\2\2\u0219\u021a\7\3\2")
        buf.write("\2\u021a\u021b\5,\27\2\u021b\u021c\7\5\2\2\u021c\u021d")
        buf.write("\5P)\2\u021d\u021e\7\5\2\2\u021eO\3\2\2\2\u021f\u0220")
        buf.write("\7b\2\2\u0220\u0221\5@!\2\u0221\u0222\7c\2\2\u0222\u0223")
        buf.write("\5R*\2\u0223Q\3\2\2\2\u0224\u0225\7\3\2\2\u0225\u0229")
        buf.write("\7\30\2\2\u0226\u0228\5T+\2\u0227\u0226\3\2\2\2\u0228")
        buf.write("\u022b\3\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a\3\2\2\2")
        buf.write("\u022a\u022c\3\2\2\2\u022b\u0229\3\2\2\2\u022c\u022f\7")
        buf.write("\5\2\2\u022d\u022f\5T+\2\u022e\u0224\3\2\2\2\u022e\u022d")
        buf.write("\3\2\2\2\u022fS\3\2\2\2\u0230\u0231\7\3\2\2\u0231\u0232")
        buf.write("\5\u0084C\2\u0232\u0233\5L\'\2\u0233\u0234\5h\65\2\u0234")
        buf.write("\u0235\7\5\2\2\u0235U\3\2\2\2\u0236\u0237\7\3\2\2\u0237")
        buf.write("\u0238\7!\2\2\u0238\u0239\58\35\2\u0239\u023a\7\24\2\2")
        buf.write("\u023a\u023b\7\3\2\2\u023b\u023c\5,\27\2\u023c\u023d\7")
        buf.write("\5\2\2\u023d\u023e\5X-\2\u023e\u023f\7\5\2\2\u023f\u024a")
        buf.write("\3\2\2\2\u0240\u0241\7\3\2\2\u0241\u0242\7!\2\2\u0242")
        buf.write("\u0243\58\35\2\u0243\u0244\7\24\2\2\u0244\u0245\7\3\2")
        buf.write("\2\u0245\u0246\7\5\2\2\u0246\u0247\5X-\2\u0247\u0248\7")
        buf.write("\5\2\2\u0248\u024a\3\2\2\2\u0249\u0236\3\2\2\2\u0249\u0240")
        buf.write("\3\2\2\2\u024aW\3\2\2\2\u024b\u024c\7\"\2\2\u024c\u025a")
        buf.write("\5\u0086D\2\u024d\u0251\7\26\2\2\u024e\u024f\7\3\2\2\u024f")
        buf.write("\u0252\7\5\2\2\u0250\u0252\5Z.\2\u0251\u024e\3\2\2\2\u0251")
        buf.write("\u0250\3\2\2\2\u0252\u025a\3\2\2\2\u0253\u0257\7c\2\2")
        buf.write("\u0254\u0255\7\3\2\2\u0255\u0258\7\5\2\2\u0256\u0258\5")
        buf.write("\u008eH\2\u0257\u0254\3\2\2\2\u0257\u0256\3\2\2\2\u0258")
        buf.write("\u025a\3\2\2\2\u0259\u024b\3\2\2\2\u0259\u024d\3\2\2\2")
        buf.write("\u0259\u0253\3\2\2\2\u025aY\3\2\2\2\u025b\u026e\5\\/\2")
        buf.write("\u025c\u025d\7\3\2\2\u025d\u0261\7\30\2\2\u025e\u0260")
        buf.write("\5Z.\2\u025f\u025e\3\2\2\2\u0260\u0263\3\2\2\2\u0261\u025f")
        buf.write("\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0264\3\2\2\2\u0263")
        buf.write("\u0261\3\2\2\2\u0264\u026e\7\5\2\2\u0265\u0266\7\3\2\2")
        buf.write("\u0266\u0267\7\35\2\2\u0267\u0268\7\3\2\2\u0268\u0269")
        buf.write("\5,\27\2\u0269\u026a\7\5\2\2\u026a\u026b\5Z.\2\u026b\u026c")
        buf.write("\7\5\2\2\u026c\u026e\3\2\2\2\u026d\u025b\3\2\2\2\u026d")
        buf.write("\u025c\3\2\2\2\u026d\u0265\3\2\2\2\u026e[\3\2\2\2\u026f")
        buf.write("\u0279\5^\60\2\u0270\u0271\7\3\2\2\u0271\u0273\7#\2\2")
        buf.write("\u0272\u0274\7`\2\2\u0273\u0272\3\2\2\2\u0273\u0274\3")
        buf.write("\2\2\2\u0274\u0275\3\2\2\2\u0275\u0276\5^\60\2\u0276\u0277")
        buf.write("\7\5\2\2\u0277\u0279\3\2\2\2\u0278\u026f\3\2\2\2\u0278")
        buf.write("\u0270\3\2\2\2\u0279]\3\2\2\2\u027a\u027b\7\3\2\2\u027b")
        buf.write("\u027c\7$\2\2\u027c\u027d\5`\61\2\u027d\u027e\5B\"\2\u027e")
        buf.write("\u027f\7\5\2\2\u027f\u0287\3\2\2\2\u0280\u0281\7\3\2\2")
        buf.write("\u0281\u0282\7%\2\2\u0282\u0283\5b\62\2\u0283\u0284\5")
        buf.write("B\"\2\u0284\u0285\7\5\2\2\u0285\u0287\3\2\2\2\u0286\u027a")
        buf.write("\3\2\2\2\u0286\u0280\3\2\2\2\u0287_\3\2\2\2\u0288\u0289")
        buf.write("\t\3\2\2\u0289a\3\2\2\2\u028a\u028b\7(\2\2\u028bc\3\2")
        buf.write("\2\2\u028c\u028d\7\3\2\2\u028d\u028e\7)\2\2\u028e\u028f")
        buf.write("\5,\27\2\u028f\u0290\5B\"\2\u0290\u0291\7\5\2\2\u0291")
        buf.write("e\3\2\2\2\u0292\u0296\5L\'\2\u0293\u0296\7e\2\2\u0294")
        buf.write("\u0296\7d\2\2\u0295\u0292\3\2\2\2\u0295\u0293\3\2\2\2")
        buf.write("\u0295\u0294\3\2\2\2\u0296g\3\2\2\2\u0297\u0298\7\3\2")
        buf.write("\2\u0298\u0299\7*\2\2\u0299\u029a\5j\66\2\u029a\u029b")
        buf.write("\7\5\2\2\u029b\u02a7\3\2\2\2\u029c\u029d\7\3\2\2\u029d")
        buf.write("\u029e\7*\2\2\u029e\u029f\5l\67\2\u029f\u02a0\7\5\2\2")
        buf.write("\u02a0\u02a7\3\2\2\2\u02a1\u02a2\7\3\2\2\u02a2\u02a3\7")
        buf.write("*\2\2\u02a3\u02a4\5n8\2\u02a4\u02a5\7\5\2\2\u02a5\u02a7")
        buf.write("\3\2\2\2\u02a6\u0297\3\2\2\2\u02a6\u029c\3\2\2\2\u02a6")
        buf.write("\u02a1\3\2\2\2\u02a7i\3\2\2\2\u02a8\u02a9\5L\'\2\u02a9")
        buf.write("\u02aa\7\37\2\2\u02aa\u02ae\3\2\2\2\u02ab\u02ac\7\37\2")
        buf.write("\2\u02ac\u02ae\5L\'\2\u02ad\u02a8\3\2\2\2\u02ad\u02ab")
        buf.write("\3\2\2\2\u02aek\3\2\2\2\u02af\u02b0\7e\2\2\u02b0\u02b4")
        buf.write("\7\37\2\2\u02b1\u02b2\7\37\2\2\u02b2\u02b4\7e\2\2\u02b3")
        buf.write("\u02af\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4m\3\2\2\2\u02b5")
        buf.write("\u02b6\7d\2\2\u02b6\u02ba\7\37\2\2\u02b7\u02b8\7\37\2")
        buf.write("\2\u02b8\u02ba\7d\2\2\u02b9\u02b5\3\2\2\2\u02b9\u02b7")
        buf.write("\3\2\2\2\u02bao\3\2\2\2\u02bb\u02bc\7\3\2\2\u02bc\u02c0")
        buf.write("\5\"\22\2\u02bd\u02bf\5J&\2\u02be\u02bd\3\2\2\2\u02bf")
        buf.write("\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02c1\3\2\2\2")
        buf.write("\u02c1\u02c3\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c4\7")
        buf.write("\5\2\2\u02c4q\3\2\2\2\u02c5\u02c6\7\3\2\2\u02c6\u02ca")
        buf.write("\7\30\2\2\u02c7\u02c9\5t;\2\u02c8\u02c7\3\2\2\2\u02c9")
        buf.write("\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2")
        buf.write("\u02cb\u02cd\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cd\u02d0\7")
        buf.write("\5\2\2\u02ce\u02d0\5t;\2\u02cf\u02c5\3\2\2\2\u02cf\u02ce")
        buf.write("\3\2\2\2\u02d0s\3\2\2\2\u02d1\u02d2\7\3\2\2\u02d2\u02d3")
        buf.write("\7\35\2\2\u02d3\u02d4\7\3\2\2\u02d4\u02d5\5,\27\2\u02d5")
        buf.write("\u02d6\7\5\2\2\u02d6\u02d7\5r:\2\u02d7\u02d8\7\5\2\2\u02d8")
        buf.write("\u02e1\3\2\2\2\u02d9\u02da\7\3\2\2\u02da\u02db\7+\2\2")
        buf.write("\u02db\u02dc\5B\"\2\u02dc\u02dd\5x=\2\u02dd\u02de\7\5")
        buf.write("\2\2\u02de\u02e1\3\2\2\2\u02df\u02e1\5v<\2\u02e0\u02d1")
        buf.write("\3\2\2\2\u02e0\u02d9\3\2\2\2\u02e0\u02df\3\2\2\2\u02e1")
        buf.write("u\3\2\2\2\u02e2\u02e3\7\3\2\2\u02e3\u02e4\5\u0082B\2\u02e4")
        buf.write("\u02e5\5L\'\2\u02e5\u02e6\5f\64\2\u02e6\u02e7\7\5\2\2")
        buf.write("\u02e7\u02fb\3\2\2\2\u02e8\u02e9\7\3\2\2\u02e9\u02ea\7")
        buf.write("\32\2\2\u02ea\u02eb\5H%\2\u02eb\u02ec\7\5\2\2\u02ec\u02fb")
        buf.write("\3\2\2\2\u02ed\u02fb\5H%\2\u02ee\u02ef\7\3\2\2\u02ef\u02f0")
        buf.write("\7,\2\2\u02f0\u02f1\5L\'\2\u02f1\u02f2\5J&\2\u02f2\u02f3")
        buf.write("\7\5\2\2\u02f3\u02fb\3\2\2\2\u02f4\u02f5\7\3\2\2\u02f5")
        buf.write("\u02f6\7,\2\2\u02f6\u02f7\5L\'\2\u02f7\u02f8\7-\2\2\u02f8")
        buf.write("\u02f9\7\5\2\2\u02f9\u02fb\3\2\2\2\u02fa\u02e2\3\2\2\2")
        buf.write("\u02fa\u02e8\3\2\2\2\u02fa\u02ed\3\2\2\2\u02fa\u02ee\3")
        buf.write("\2\2\2\u02fa\u02f4\3\2\2\2\u02fbw\3\2\2\2\u02fc\u02fd")
        buf.write("\7\3\2\2\u02fd\u0301\7\30\2\2\u02fe\u0300\5v<\2\u02ff")
        buf.write("\u02fe\3\2\2\2\u0300\u0303\3\2\2\2\u0301\u02ff\3\2\2\2")
        buf.write("\u0301\u0302\3\2\2\2\u0302\u0304\3\2\2\2\u0303\u0301\3")
        buf.write("\2\2\2\u0304\u0307\7\5\2\2\u0305\u0307\5v<\2\u0306\u02fc")
        buf.write("\3\2\2\2\u0306\u0305\3\2\2\2\u0307y\3\2\2\2\u0308\u0309")
        buf.write("\t\4\2\2\u0309{\3\2\2\2\u030a\u030b\t\5\2\2\u030b}\3\2")
        buf.write("\2\2\u030c\u030d\t\6\2\2\u030d\177\3\2\2\2\u030e\u030f")
        buf.write("\t\7\2\2\u030f\u0081\3\2\2\2\u0310\u0311\t\b\2\2\u0311")
        buf.write("\u0083\3\2\2\2\u0312\u0313\t\t\2\2\u0313\u0085\3\2\2\2")
        buf.write("\u0314\u0315\7\3\2\2\u0315\u0317\7\30\2\2\u0316\u0318")
        buf.write("\5\u0088E\2\u0317\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031b\u031c\7\5\2\2\u031c\u0321\3\2\2\2\u031d\u031e\7")
        buf.write("\3\2\2\u031e\u0321\7\5\2\2\u031f\u0321\5\u0088E\2\u0320")
        buf.write("\u0314\3\2\2\2\u0320\u031d\3\2\2\2\u0320\u031f\3\2\2\2")
        buf.write("\u0321\u0087\3\2\2\2\u0322\u0323\7\3\2\2\u0323\u0324\5")
        buf.write("\u008aF\2\u0324\u0325\7D\2\2\u0325\u0326\5\u008cG\2\u0326")
        buf.write("\u0327\7\5\2\2\u0327\u032f\3\2\2\2\u0328\u0329\7\3\2\2")
        buf.write("\u0329\u032a\7$\2\2\u032a\u032b\5`\61\2\u032b\u032c\5")
        buf.write("\u0088E\2\u032c\u032d\7\5\2\2\u032d\u032f\3\2\2\2\u032e")
        buf.write("\u0322\3\2\2\2\u032e\u0328\3\2\2\2\u032f\u0089\3\2\2\2")
        buf.write("\u0330\u0331\t\n\2\2\u0331\u008b\3\2\2\2\u0332\u0335\7")
        buf.write("e\2\2\u0333\u0335\5f\64\2\u0334\u0332\3\2\2\2\u0334\u0333")
        buf.write("\3\2\2\2\u0335\u008d\3\2\2\2\u0336\u0337\7\3\2\2\u0337")
        buf.write("\u033b\7\30\2\2\u0338\u033a\5\u008eH\2\u0339\u0338\3\2")
        buf.write("\2\2\u033a\u033d\3\2\2\2\u033b\u0339\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033e\3\2\2\2\u033d\u033b\3\2\2\2\u033e")
        buf.write("\u0355\7\5\2\2\u033f\u0355\5\u0090I\2\u0340\u0341\7\3")
        buf.write("\2\2\u0341\u0342\7\35\2\2\u0342\u0343\7\3\2\2\u0343\u0344")
        buf.write("\5,\27\2\u0344\u0345\7\5\2\2\u0345\u0346\5\u008eH\2\u0346")
        buf.write("\u0347\7\5\2\2\u0347\u0355\3\2\2\2\u0348\u0349\7\3\2\2")
        buf.write("\u0349\u034a\7+\2\2\u034a\u034b\5Z.\2\u034b\u034c\5\u0090")
        buf.write("I\2\u034c\u034d\7\5\2\2\u034d\u0355\3\2\2\2\u034e\u034f")
        buf.write("\7\3\2\2\u034f\u0350\5\u0082B\2\u0350\u0351\5p9\2\u0351")
        buf.write("\u0352\5\u0094K\2\u0352\u0353\7\5\2\2\u0353\u0355\3\2")
        buf.write("\2\2\u0354\u0336\3\2\2\2\u0354\u033f\3\2\2\2\u0354\u0340")
        buf.write("\3\2\2\2\u0354\u0348\3\2\2\2\u0354\u034e\3\2\2\2\u0355")
        buf.write("\u008f\3\2\2\2\u0356\u0357\7\3\2\2\u0357\u0358\7$\2\2")
        buf.write("\u0358\u0359\5`\61\2\u0359\u035a\5\u008eH\2\u035a\u035b")
        buf.write("\7\5\2\2\u035b\u0369\3\2\2\2\u035c\u035d\7\3\2\2\u035d")
        buf.write("\u035e\7$\2\2\u035e\u035f\5`\61\2\u035f\u0360\5\u0092")
        buf.write("J\2\u0360\u0361\7\5\2\2\u0361\u0369\3\2\2\2\u0362\u0363")
        buf.write("\7\3\2\2\u0363\u0364\5\u0082B\2\u0364\u0365\5p9\2\u0365")
        buf.write("\u0366\5f\64\2\u0366\u0367\7\5\2\2\u0367\u0369\3\2\2\2")
        buf.write("\u0368\u0356\3\2\2\2\u0368\u035c\3\2\2\2\u0368\u0362\3")
        buf.write("\2\2\2\u0369\u0091\3\2\2\2\u036a\u036b\7\3\2\2\u036b\u036c")
        buf.write("\5\u0082B\2\u036c\u036d\5p9\2\u036d\u036e\5\u0094K\2\u036e")
        buf.write("\u036f\7\5\2\2\u036f\u0093\3\2\2\2\u0370\u0377\7\3\2\2")
        buf.write("\u0371\u0372\5z>\2\u0372\u0373\5\u0094K\2\u0373\u0374")
        buf.write("\5\u0094K\2\u0374\u0378\3\2\2\2\u0375\u0376\7\16\2\2\u0376")
        buf.write("\u0378\5\u0094K\2\u0377\u0371\3\2\2\2\u0377\u0375\3\2")
        buf.write("\2\2\u0378\u0379\3\2\2\2\u0379\u037a\7\5\2\2\u037a\u037e")
        buf.write("\3\2\2\2\u037b\u037e\7D\2\2\u037c\u037e\5f\64\2\u037d")
        buf.write("\u0370\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037c\3\2\2\2")
        buf.write("\u037e\u0095\3\2\2\2\u037f\u0380\7\3\2\2\u0380\u0381\7")
        buf.write("\4\2\2\u0381\u0382\5\u009aN\2\u0382\u0384\5\u009cO\2\u0383")
        buf.write("\u0385\5\n\6\2\u0384\u0383\3\2\2\2\u0384\u0385\3\2\2\2")
        buf.write("\u0385\u0387\3\2\2\2\u0386\u0388\5\u009eP\2\u0387\u0386")
        buf.write("\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u038a\5\u00a4S\2\u038a\u038e\5\u00b0Y\2\u038b\u038d\5")
        buf.write("\u0098M\2\u038c\u038b\3\2\2\2\u038d\u0390\3\2\2\2\u038e")
        buf.write("\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0391\3\2\2\2")
        buf.write("\u0390\u038e\3\2\2\2\u0391\u0392\7\5\2\2\u0392\u0097\3")
        buf.write("\2\2\2\u0393\u0397\5\u00b2Z\2\u0394\u0397\5\u00a0Q\2\u0395")
        buf.write("\u0397\5\u00b6\\\2\u0396\u0393\3\2\2\2\u0396\u0394\3\2")
        buf.write("\2\2\u0396\u0395\3\2\2\2\u0397\u0099\3\2\2\2\u0398\u0399")
        buf.write("\7\3\2\2\u0399\u039a\7E\2\2\u039a\u039b\7`\2\2\u039b\u039c")
        buf.write("\7\5\2\2\u039c\u009b\3\2\2\2\u039d\u039e\7\3\2\2\u039e")
        buf.write("\u039f\7F\2\2\u039f\u03a0\7`\2\2\u03a0\u03a1\7\5\2\2\u03a1")
        buf.write("\u009d\3\2\2\2\u03a2\u03a3\7\3\2\2\u03a3\u03a4\7G\2\2")
        buf.write("\u03a4\u03a5\5\24\13\2\u03a5\u03a6\7\5\2\2\u03a6\u009f")
        buf.write("\3\2\2\2\u03a7\u03a8\7\3\2\2\u03a8\u03aa\7H\2\2\u03a9")
        buf.write("\u03ab\5\u00a2R\2\u03aa\u03a9\3\2\2\2\u03ab\u03ac\3\2")
        buf.write("\2\2\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae")
        buf.write("\3\2\2\2\u03ae\u03af\7\5\2\2\u03af\u00a1\3\2\2\2\u03b0")
        buf.write("\u03b1\7\3\2\2\u03b1\u03b2\7`\2\2\u03b2\u03b3\7\16\2\2")
        buf.write("\u03b3\u03b4\5\16\b\2\u03b4\u03b5\7I\2\2\u03b5\u03b6\7")
        buf.write("e\2\2\u03b6\u03b7\7J\2\2\u03b7\u03b8\7e\2\2\u03b8\u03b9")
        buf.write("\7K\2\2\u03b9\u03ba\7\5\2\2\u03ba\u00a3\3\2\2\2\u03bb")
        buf.write("\u03bc\7\3\2\2\u03bc\u03c0\7L\2\2\u03bd\u03bf\5\u00aa")
        buf.write("V\2\u03be\u03bd\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0\u03be")
        buf.write("\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c3\3\2\2\2\u03c2")
        buf.write("\u03c0\3\2\2\2\u03c3\u03c4\7\5\2\2\u03c4\u00a5\3\2\2\2")
        buf.write("\u03c5\u03c9\7`\2\2\u03c6\u03c9\7e\2\2\u03c7\u03c9\5\u00a8")
        buf.write("U\2\u03c8\u03c5\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c7")
        buf.write("\3\2\2\2\u03c9\u00a7\3\2\2\2\u03ca\u03cb\7\3\2\2\u03cb")
        buf.write("\u03cf\5\"\22\2\u03cc\u03ce\5\u00a6T\2\u03cd\u03cc\3\2")
        buf.write("\2\2\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0")
        buf.write("\3\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2")
        buf.write("\u03d3\7\5\2\2\u03d3\u00a9\3\2\2\2\u03d4\u03e8\5\u00ac")
        buf.write("W\2\u03d5\u03d6\7\3\2\2\u03d6\u03d7\7\36\2\2\u03d7\u03d8")
        buf.write("\5\u00a8U\2\u03d8\u03d9\7e\2\2\u03d9\u03da\7\5\2\2\u03da")
        buf.write("\u03e8\3\2\2\2\u03db\u03dc\7\3\2\2\u03dc\u03dd\7$\2\2")
        buf.write("\u03dd\u03de\7e\2\2\u03de\u03df\5\u00acW\2\u03df\u03e0")
        buf.write("\7\5\2\2\u03e0\u03e8\3\2\2\2\u03e1\u03e2\7\3\2\2\u03e2")
        buf.write("\u03e3\7\36\2\2\u03e3\u03e4\5\u00a8U\2\u03e4\u03e5\7`")
        buf.write("\2\2\u03e5\u03e6\7\5\2\2\u03e6\u03e8\3\2\2\2\u03e7\u03d4")
        buf.write("\3\2\2\2\u03e7\u03d5\3\2\2\2\u03e7\u03db\3\2\2\2\u03e7")
        buf.write("\u03e1\3\2\2\2\u03e8\u00ab\3\2\2\2\u03e9\u03f0\5\u00ae")
        buf.write("X\2\u03ea\u03eb\7\3\2\2\u03eb\u03ec\7\32\2\2\u03ec\u03ed")
        buf.write("\5\u00aeX\2\u03ed\u03ee\7\5\2\2\u03ee\u03f0\3\2\2\2\u03ef")
        buf.write("\u03e9\3\2\2\2\u03ef\u03ea\3\2\2\2\u03f0\u00ad\3\2\2\2")
        buf.write("\u03f1\u03f2\7\3\2\2\u03f2\u03f6\5*\26\2\u03f3\u03f5\5")
        buf.write("\u00a6T\2\u03f4\u03f3\3\2\2\2\u03f5\u03f8\3\2\2\2\u03f6")
        buf.write("\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f9\3\2\2\2")
        buf.write("\u03f8\u03f6\3\2\2\2\u03f9\u03fa\7\5\2\2\u03fa\u00af\3")
        buf.write("\2\2\2\u03fb\u03fc\7\3\2\2\u03fc\u03fd\7M\2\2\u03fd\u03fe")
        buf.write("\5B\"\2\u03fe\u03ff\7\5\2\2\u03ff\u00b1\3\2\2\2\u0400")
        buf.write("\u0401\7\3\2\2\u0401\u0402\7N\2\2\u0402\u0403\5\u00b4")
        buf.write("[\2\u0403\u0404\7\5\2\2\u0404\u00b3\3\2\2\2\u0405\u0406")
        buf.write("\7\3\2\2\u0406\u040a\7\30\2\2\u0407\u0409\5\u00b4[\2\u0408")
        buf.write("\u0407\3\2\2\2\u0409\u040c\3\2\2\2\u040a\u0408\3\2\2\2")
        buf.write("\u040a\u040b\3\2\2\2\u040b\u040d\3\2\2\2\u040c\u040a\3")
        buf.write("\2\2\2\u040d\u0424\7\5\2\2\u040e\u040f\7\3\2\2\u040f\u0410")
        buf.write("\7\35\2\2\u0410\u0411\7\3\2\2\u0411\u0412\5,\27\2\u0412")
        buf.write("\u0413\7\5\2\2\u0413\u0414\5\u00b4[\2\u0414\u0415\7\5")
        buf.write("\2\2\u0415\u0424\3\2\2\2\u0416\u0417\7\3\2\2\u0417\u0419")
        buf.write("\7#\2\2\u0418\u041a\7`\2\2\u0419\u0418\3\2\2\2\u0419\u041a")
        buf.write("\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\5\u00c0a\2\u041c")
        buf.write("\u041d\7\5\2\2\u041d\u0424\3\2\2\2\u041e\u0420\5\u00c0")
        buf.write("a\2\u041f\u041e\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u041f")
        buf.write("\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0424\3\2\2\2\u0423")
        buf.write("\u0405\3\2\2\2\u0423\u040e\3\2\2\2\u0423\u0416\3\2\2\2")
        buf.write("\u0423\u041f\3\2\2\2\u0424\u00b5\3\2\2\2\u0425\u0426\7")
        buf.write("\3\2\2\u0426\u0427\7O\2\2\u0427\u0428\5\u00b8]\2\u0428")
        buf.write("\u0429\5\u00ba^\2\u0429\u042a\7\5\2\2\u042a\u00b7\3\2")
        buf.write("\2\2\u042b\u042c\t\13\2\2\u042c\u00b9\3\2\2\2\u042d\u043a")
        buf.write("\5L\'\2\u042e\u042f\5\u00bc_\2\u042f\u0430\5\u00be`\2")
        buf.write("\u0430\u043a\3\2\2\2\u0431\u0432\5\u00be`\2\u0432\u0433")
        buf.write("\5\u00bc_\2\u0433\u043a\3\2\2\2\u0434\u043a\7R\2\2\u0435")
        buf.write("\u0436\7\3\2\2\u0436\u0437\7S\2\2\u0437\u0438\7`\2\2\u0438")
        buf.write("\u043a\7\5\2\2\u0439\u042d\3\2\2\2\u0439\u042e\3\2\2\2")
        buf.write("\u0439\u0431\3\2\2\2\u0439\u0434\3\2\2\2\u0439\u0435\3")
        buf.write("\2\2\2\u043a\u00bb\3\2\2\2\u043b\u043c\7\3\2\2\u043c\u043d")
        buf.write("\7T\2\2\u043d\u043e\5L\'\2\u043e\u043f\7\5\2\2\u043f\u00bd")
        buf.write("\3\2\2\2\u0440\u0441\7\3\2\2\u0441\u0442\7U\2\2\u0442")
        buf.write("\u0443\5L\'\2\u0443\u0444\7\5\2\2\u0444\u00bf\3\2\2\2")
        buf.write("\u0445\u0446\7\3\2\2\u0446\u0448\7\30\2\2\u0447\u0449")
        buf.write("\5\u00c0a\2\u0448\u0447\3\2\2\2\u0449\u044a\3\2\2\2\u044a")
        buf.write("\u0448\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u044d\7\5\2\2\u044d\u049c\3\2\2\2\u044e\u044f\7")
        buf.write("\3\2\2\u044f\u0450\7\35\2\2\u0450\u0451\7\3\2\2\u0451")
        buf.write("\u0452\5,\27\2\u0452\u0453\7\5\2\2\u0453\u0454\5\u00c0")
        buf.write("a\2\u0454\u0455\7\5\2\2\u0455\u049c\3\2\2\2\u0456\u0457")
        buf.write("\7\3\2\2\u0457\u0458\7$\2\2\u0458\u0459\7\'\2\2\u0459")
        buf.write("\u045a\5B\"\2\u045a\u045b\7\5\2\2\u045b\u049c\3\2\2\2")
        buf.write("\u045c\u045d\7\3\2\2\u045d\u045e\7V\2\2\u045e\u045f\5")
        buf.write("B\"\2\u045f\u0460\7\5\2\2\u0460\u049c\3\2\2\2\u0461\u0462")
        buf.write("\7\3\2\2\u0462\u0463\7W\2\2\u0463\u0464\5B\"\2\u0464\u0465")
        buf.write("\7\5\2\2\u0465\u049c\3\2\2\2\u0466\u0467\7\3\2\2\u0467")
        buf.write("\u0468\7X\2\2\u0468\u0469\7e\2\2\u0469\u046a\5B\"\2\u046a")
        buf.write("\u046b\7\5\2\2\u046b\u049c\3\2\2\2\u046c\u046d\7\3\2\2")
        buf.write("\u046d\u046e\7Y\2\2\u046e\u046f\5B\"\2\u046f\u0470\7\5")
        buf.write("\2\2\u0470\u049c\3\2\2\2\u0471\u0472\7\3\2\2\u0472\u0473")
        buf.write("\7Z\2\2\u0473\u0474\5B\"\2\u0474\u0475\5B\"\2\u0475\u0476")
        buf.write("\7\5\2\2\u0476\u049c\3\2\2\2\u0477\u0478\7\3\2\2\u0478")
        buf.write("\u0479\7[\2\2\u0479\u047a\5B\"\2\u047a\u047b\5B\"\2\u047b")
        buf.write("\u047c\7\5\2\2\u047c\u049c\3\2\2\2\u047d\u047e\7\3\2\2")
        buf.write("\u047e\u047f\7\\\2\2\u047f\u0480\7e\2\2\u0480\u0481\5")
        buf.write("B\"\2\u0481\u0482\5B\"\2\u0482\u0483\7\5\2\2\u0483\u049c")
        buf.write("\3\2\2\2\u0484\u0485\7\3\2\2\u0485\u0486\7]\2\2\u0486")
        buf.write("\u0487\7e\2\2\u0487\u0488\7e\2\2\u0488\u0489\5B\"\2\u0489")
        buf.write("\u048a\7\5\2\2\u048a\u049c\3\2\2\2\u048b\u048c\7\3\2\2")
        buf.write("\u048c\u048d\7^\2\2\u048d\u048e\7e\2\2\u048e\u048f\5B")
        buf.write("\"\2\u048f\u0490\7\5\2\2\u0490\u049c\3\2\2\2\u0491\u0492")
        buf.write("\7\3\2\2\u0492\u0494\7a\2\2\u0493\u0495\5\u00a8U\2\u0494")
        buf.write("\u0493\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0494\3\2\2\2")
        buf.write("\u0496\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499\7")
        buf.write("\5\2\2\u0499\u049c\3\2\2\2\u049a\u049c\5B\"\2\u049b\u0445")
        buf.write("\3\2\2\2\u049b\u044e\3\2\2\2\u049b\u0456\3\2\2\2\u049b")
        buf.write("\u045c\3\2\2\2\u049b\u0461\3\2\2\2\u049b\u0466\3\2\2\2")
        buf.write("\u049b\u046c\3\2\2\2\u049b\u0471\3\2\2\2\u049b\u0477\3")
        buf.write("\2\2\2\u049b\u047d\3\2\2\2\u049b\u0484\3\2\2\2\u049b\u048b")
        buf.write("\3\2\2\2\u049b\u0491\3\2\2\2\u049b\u049a\3\2\2\2\u049c")
        buf.write("\u00c1\3\2\2\2X\u00c4\u00ca\u00cd\u00d0\u00d3\u00d6\u00d9")
        buf.write("\u00de\u00e8\u00f7\u0103\u0107\u010c\u0113\u0117\u0123")
        buf.write("\u0128\u012c\u0133\u013b\u0151\u0160\u0166\u016b\u016e")
        buf.write("\u0173\u017e\u01ad\u01b5\u01be\u01df\u01f2\u01fc\u0203")
        buf.write("\u0213\u0229\u022e\u0249\u0251\u0257\u0259\u0261\u026d")
        buf.write("\u0273\u0278\u0286\u0295\u02a6\u02ad\u02b3\u02b9\u02c0")
        buf.write("\u02ca\u02cf\u02e0\u02fa\u0301\u0306\u0319\u0320\u032e")
        buf.write("\u0334\u033b\u0354\u0368\u0377\u037d\u0384\u0387\u038e")
        buf.write("\u0396\u03ac\u03c0\u03c8\u03cf\u03e7\u03ef\u03f6\u040a")
        buf.write("\u0419\u0421\u0423\u0439\u044a\u0496\u049b")
        return buf.getvalue()


class FunctionalStripsParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'('", u"'define'", u"')'", u"':free_functions'", 
                     u"'domain'", u"':requirements'", u"':types'", u"'int'", 
                     u"'float'", u"'number'", u"'object'", u"'-'", u"'either'", 
                     u"':functions'", u"':constants'", u"':predicates'", 
                     u"':action'", u"':parameters'", u"':constraint'", u"':condition'", 
                     u"':event'", u"'and'", u"'or'", u"'not'", u"'imply'", 
                     u"'exists'", u"'forall'", u"'='", u"'#t'", u"':process'", 
                     u"':durative-action'", u"':duration'", u"'preference'", 
                     u"'at'", u"'over'", u"'start'", u"'end'", u"'all'", 
                     u"':derived'", u"'*'", u"'when'", u"'assign'", u"'undefined'", 
                     u"'+'", u"'/'", u"'^'", u"'max'", u"'min'", u"'sin'", 
                     u"'cos'", u"'sqrt'", u"'tan'", u"'acos'", u"'asin'", 
                     u"'atan'", u"'exp'", u"'abs'", u"'>'", u"'<'", u"'>='", 
                     u"'<='", u"'scale-up'", u"'scale-down'", u"'increase'", 
                     u"'decrease'", u"'?duration'", u"'problem'", u"':domain'", 
                     u"':objects'", u"':bounds'", u"'['", u"'..'", u"']'", 
                     u"':init'", u"':goal'", u"':constraints'", u"':metric'", 
                     u"'minimize'", u"'maximize'", u"'(total-time)'", u"'is-violated'", 
                     u"':terminal'", u"':stage'", u"'always'", u"'sometime'", 
                     u"'within'", u"'at-most-once'", u"'sometime-after'", 
                     u"'sometime-before'", u"'always-within'", u"'hold-during'", 
                     u"'hold-after'", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"':precondition'", u"':effect'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"REQUIRE_KEY", u"NAME", u"EXTNAME", 
                      u"PREC_TAG", u"EFF_TAG", u"VARIABLE", u"NUMBER", u"LINE_COMMENT", 
                      u"WHITESPACE", u"DOMAIN", u"DOMAIN_NAME", u"REQUIREMENTS", 
                      u"TYPES", u"EITHER_TYPE", u"CONSTANTS", u"FUNCTIONS", 
                      u"FREE_FUNCTIONS", u"PREDICATES", u"ACTION", u"CONSTRAINT", 
                      u"EVENT", u"GLOBAL_CONSTRAINT", u"DURATIVE_ACTION", 
                      u"PROBLEM", u"PROBLEM_NAME", u"PROBLEM_DOMAIN", u"OBJECTS", 
                      u"INIT", u"FUNC_HEAD", u"PRECONDITION", u"EFFECT", 
                      u"AND_GD", u"OR_GD", u"NOT_GD", u"IMPLY_GD", u"EXISTS_GD", 
                      u"FORALL_GD", u"COMPARISON_GD", u"AND_EFFECT", u"FORALL_EFFECT", 
                      u"WHEN_EFFECT", u"ASSIGN_EFFECT", u"NOT_EFFECT", u"PRED_HEAD", 
                      u"GOAL", u"BINARY_OP", u"EQUALITY_CON", u"MULTI_OP", 
                      u"MINUS_OP", u"UNARY_MINUS", u"INIT_EQ", u"INIT_AT", 
                      u"NOT_PRED_INIT", u"PRED_INST", u"PROBLEM_CONSTRAINT", 
                      u"PROBLEM_METRIC" ]

    RULE_pddlDoc = 0
    RULE_domain = 1
    RULE_free_functionsDef = 2
    RULE_domainName = 3
    RULE_requireDef = 4
    RULE_typesDef = 5
    RULE_numericBuiltinType = 6
    RULE_builtinType = 7
    RULE_nameList = 8
    RULE_typedNameList = 9
    RULE_nameListWithType = 10
    RULE_typename = 11
    RULE_primType = 12
    RULE_functionsDef = 13
    RULE_functionDeclGroup = 14
    RULE_atomicFunctionSkeleton = 15
    RULE_functionSymbol = 16
    RULE_constantsDef = 17
    RULE_predicatesDef = 18
    RULE_atomicFormulaSkeleton = 19
    RULE_predicate = 20
    RULE_typedVariableList = 21
    RULE_variableListWithType = 22
    RULE_structureDef = 23
    RULE_actionDef = 24
    RULE_constraintDef = 25
    RULE_eventDef = 26
    RULE_actionSymbol = 27
    RULE_constraintSymbol = 28
    RULE_eventSymbol = 29
    RULE_actionDefBody = 30
    RULE_precondition = 31
    RULE_goalDesc = 32
    RULE_equality = 33
    RULE_fComp = 34
    RULE_atomicTermFormula = 35
    RULE_term = 36
    RULE_functionTerm = 37
    RULE_processDef = 38
    RULE_processDefBody = 39
    RULE_processEffectList = 40
    RULE_processEffect = 41
    RULE_durativeActionDef = 42
    RULE_daDefBody = 43
    RULE_daGD = 44
    RULE_prefTimedGD = 45
    RULE_timedGD = 46
    RULE_timeSpecifier = 47
    RULE_interval = 48
    RULE_derivedDef = 49
    RULE_fExp = 50
    RULE_processEffectExp = 51
    RULE_processFunctionEff = 52
    RULE_processConstEff = 53
    RULE_processVarEff = 54
    RULE_fHead = 55
    RULE_effect = 56
    RULE_cEffect = 57
    RULE_pEffect = 58
    RULE_condEffect = 59
    RULE_binaryOp = 60
    RULE_unaryBuiltIn = 61
    RULE_multiOp = 62
    RULE_binaryComp = 63
    RULE_assignOp = 64
    RULE_processEffectOp = 65
    RULE_durationConstraint = 66
    RULE_simpleDurationConstraint = 67
    RULE_durOp = 68
    RULE_durValue = 69
    RULE_daEffect = 70
    RULE_timedEffect = 71
    RULE_fAssignDA = 72
    RULE_fExpDA = 73
    RULE_problem = 74
    RULE_problemMeta = 75
    RULE_problemDecl = 76
    RULE_problemDomain = 77
    RULE_objectDecl = 78
    RULE_boundsDecl = 79
    RULE_typeBoundsDefinition = 80
    RULE_init = 81
    RULE_groundTerm = 82
    RULE_groundFunctionTerm = 83
    RULE_initEl = 84
    RULE_nameLiteral = 85
    RULE_groundAtomicFormula = 86
    RULE_goal = 87
    RULE_probConstraints = 88
    RULE_prefConGD = 89
    RULE_metricSpec = 90
    RULE_optimization = 91
    RULE_metricFExp = 92
    RULE_terminalCost = 93
    RULE_stageCost = 94
    RULE_conGD = 95

    ruleNames =  [ "pddlDoc", "domain", "free_functionsDef", "domainName", 
                   "requireDef", "typesDef", "numericBuiltinType", "builtinType", 
                   "nameList", "typedNameList", "nameListWithType", "typename", 
                   "primType", "functionsDef", "functionDeclGroup", "atomicFunctionSkeleton", 
                   "functionSymbol", "constantsDef", "predicatesDef", "atomicFormulaSkeleton", 
                   "predicate", "typedVariableList", "variableListWithType", 
                   "structureDef", "actionDef", "constraintDef", "eventDef", 
                   "actionSymbol", "constraintSymbol", "eventSymbol", "actionDefBody", 
                   "precondition", "goalDesc", "equality", "fComp", "atomicTermFormula", 
                   "term", "functionTerm", "processDef", "processDefBody", 
                   "processEffectList", "processEffect", "durativeActionDef", 
                   "daDefBody", "daGD", "prefTimedGD", "timedGD", "timeSpecifier", 
                   "interval", "derivedDef", "fExp", "processEffectExp", 
                   "processFunctionEff", "processConstEff", "processVarEff", 
                   "fHead", "effect", "cEffect", "pEffect", "condEffect", 
                   "binaryOp", "unaryBuiltIn", "multiOp", "binaryComp", 
                   "assignOp", "processEffectOp", "durationConstraint", 
                   "simpleDurationConstraint", "durOp", "durValue", "daEffect", 
                   "timedEffect", "fAssignDA", "fExpDA", "problem", "problemMeta", 
                   "problemDecl", "problemDomain", "objectDecl", "boundsDecl", 
                   "typeBoundsDefinition", "init", "groundTerm", "groundFunctionTerm", 
                   "initEl", "nameLiteral", "groundAtomicFormula", "goal", 
                   "probConstraints", "prefConGD", "metricSpec", "optimization", 
                   "metricFExp", "terminalCost", "stageCost", "conGD" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    REQUIRE_KEY=93
    NAME=94
    EXTNAME=95
    PREC_TAG=96
    EFF_TAG=97
    VARIABLE=98
    NUMBER=99
    LINE_COMMENT=100
    WHITESPACE=101
    DOMAIN=102
    DOMAIN_NAME=103
    REQUIREMENTS=104
    TYPES=105
    EITHER_TYPE=106
    CONSTANTS=107
    FUNCTIONS=108
    FREE_FUNCTIONS=109
    PREDICATES=110
    ACTION=111
    CONSTRAINT=112
    EVENT=113
    GLOBAL_CONSTRAINT=114
    DURATIVE_ACTION=115
    PROBLEM=116
    PROBLEM_NAME=117
    PROBLEM_DOMAIN=118
    OBJECTS=119
    INIT=120
    FUNC_HEAD=121
    PRECONDITION=122
    EFFECT=123
    AND_GD=124
    OR_GD=125
    NOT_GD=126
    IMPLY_GD=127
    EXISTS_GD=128
    FORALL_GD=129
    COMPARISON_GD=130
    AND_EFFECT=131
    FORALL_EFFECT=132
    WHEN_EFFECT=133
    ASSIGN_EFFECT=134
    NOT_EFFECT=135
    PRED_HEAD=136
    GOAL=137
    BINARY_OP=138
    EQUALITY_CON=139
    MULTI_OP=140
    MINUS_OP=141
    UNARY_MINUS=142
    INIT_EQ=143
    INIT_AT=144
    NOT_PRED_INIT=145
    PRED_INST=146
    PROBLEM_CONSTRAINT=147
    PROBLEM_METRIC=148

    def __init__(self, input:TokenStream):
        super().__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PddlDocContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domain(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DomainContext,0)


        def problem(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProblemContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_pddlDoc

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPddlDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPddlDoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPddlDoc(self)
            else:
                return visitor.visitChildren(self)




    def pddlDoc(self):

        localctx = FunctionalStripsParser.PddlDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_pddlDoc)
        try:
            self.state = 194
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 192
                self.domain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 193
                self.problem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def domainName(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DomainNameContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.RequireDefContext,0)


        def typesDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypesDefContext,0)


        def constantsDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConstantsDefContext,0)


        def predicatesDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicatesDefContext,0)


        def functionsDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionsDefContext,0)


        def free_functionsDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.Free_functionsDefContext,0)


        def structureDef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.StructureDefContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.StructureDefContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_domain

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDomain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDomain(self)
            else:
                return visitor.visitChildren(self)




    def domain(self):

        localctx = FunctionalStripsParser.DomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_domain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self.match(FunctionalStripsParser.T__0)
            self.state = 197
            self.match(FunctionalStripsParser.T__1)
            self.state = 198
            self.domainName()
            self.state = 200
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 199
                self.requireDef()


            self.state = 203
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 202
                self.typesDef()


            self.state = 206
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 205
                self.constantsDef()


            self.state = 209
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 208
                self.predicatesDef()


            self.state = 212
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 211
                self.functionsDef()


            self.state = 215
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 214
                self.free_functionsDef()


            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 217
                self.structureDef()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Free_functionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FunctionDeclGroupContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FunctionDeclGroupContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_free_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFree_functionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFree_functionsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFree_functionsDef(self)
            else:
                return visitor.visitChildren(self)




    def free_functionsDef(self):

        localctx = FunctionalStripsParser.Free_functionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_free_functionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(FunctionalStripsParser.T__0)
            self.state = 226
            self.match(FunctionalStripsParser.T__3)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 227
                self.functionDeclGroup()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DomainNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_domainName

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDomainName(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDomainName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDomainName(self)
            else:
                return visitor.visitChildren(self)




    def domainName(self):

        localctx = FunctionalStripsParser.DomainNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_domainName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(FunctionalStripsParser.T__0)
            self.state = 236
            self.match(FunctionalStripsParser.T__4)
            self.state = 237
            self.match(FunctionalStripsParser.NAME)
            self.state = 238
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RequireDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRE_KEY(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.REQUIRE_KEY)
            else:
                return self.getToken(FunctionalStripsParser.REQUIRE_KEY, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_requireDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterRequireDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitRequireDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitRequireDef(self)
            else:
                return visitor.visitChildren(self)




    def requireDef(self):

        localctx = FunctionalStripsParser.RequireDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_requireDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(FunctionalStripsParser.T__0)
            self.state = 241
            self.match(FunctionalStripsParser.T__5)
            self.state = 243 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 242
                self.match(FunctionalStripsParser.REQUIRE_KEY)
                self.state = 245 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.REQUIRE_KEY):
                    break

            self.state = 247
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typesDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTypesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTypesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTypesDef(self)
            else:
                return visitor.visitChildren(self)




    def typesDef(self):

        localctx = FunctionalStripsParser.TypesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_typesDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(FunctionalStripsParser.T__0)
            self.state = 250
            self.match(FunctionalStripsParser.T__6)
            self.state = 251
            self.typedNameList()
            self.state = 252
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericBuiltinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_numericBuiltinType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NumericBuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)


    class FloatContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NumericBuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFloat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFloat(self)
            else:
                return visitor.visitChildren(self)


    class NumberContext(NumericBuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NumericBuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)



    def numericBuiltinType(self):

        localctx = FunctionalStripsParser.NumericBuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_numericBuiltinType)
        try:
            self.state = 257
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__7]:
                localctx = FunctionalStripsParser.IntegerContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.match(FunctionalStripsParser.T__7)

            elif token in [FunctionalStripsParser.T__8]:
                localctx = FunctionalStripsParser.FloatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 255
                self.match(FunctionalStripsParser.T__8)

            elif token in [FunctionalStripsParser.T__9]:
                localctx = FunctionalStripsParser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 256
                self.match(FunctionalStripsParser.T__9)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BuiltinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_builtinType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ObjectBuiltinContext(BuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.BuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterObjectBuiltin(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitObjectBuiltin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitObjectBuiltin(self)
            else:
                return visitor.visitChildren(self)


    class NumericBuiltinContext(BuiltinTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.BuiltinTypeContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def numericBuiltinType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NumericBuiltinTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNumericBuiltin(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNumericBuiltin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNumericBuiltin(self)
            else:
                return visitor.visitChildren(self)



    def builtinType(self):

        localctx = FunctionalStripsParser.BuiltinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_builtinType)
        try:
            self.state = 261
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__7, FunctionalStripsParser.T__8, FunctionalStripsParser.T__9]:
                localctx = FunctionalStripsParser.NumericBuiltinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 259
                self.numericBuiltinType()

            elif token in [FunctionalStripsParser.T__10]:
                localctx = FunctionalStripsParser.ObjectBuiltinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.match(FunctionalStripsParser.T__10)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.NAME)
            else:
                return self.getToken(FunctionalStripsParser.NAME, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_nameList

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNameList(self)
            else:
                return visitor.visitChildren(self)




    def nameList(self):

        localctx = FunctionalStripsParser.NameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_nameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.NAME:
                self.state = 263
                self.match(FunctionalStripsParser.NAME)
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typedNameList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleNameListContext(TypedNameListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedNameListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleNameList(self)
            else:
                return visitor.visitChildren(self)


    class ComplexNameListContext(TypedNameListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedNameListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameListContext,0)

        def nameListWithType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.NameListWithTypeContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.NameListWithTypeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterComplexNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitComplexNameList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitComplexNameList(self)
            else:
                return visitor.visitChildren(self)



    def typedNameList(self):

        localctx = FunctionalStripsParser.TypedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typedNameList)
        try:
            self.state = 277
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.SimpleNameListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.nameList()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ComplexNameListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 271 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 270
                        self.nameListWithType()

                    else:
                        raise NoViableAltException(self)
                    self.state = 273 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

                self.state = 275
                self.nameList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameListWithTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.theType = None # TypenameContext

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def nameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameListContext,0)


        def typename(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypenameContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_nameListWithType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNameListWithType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNameListWithType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNameListWithType(self)
            else:
                return visitor.visitChildren(self)




    def nameListWithType(self):

        localctx = FunctionalStripsParser.NameListWithTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_nameListWithType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(FunctionalStripsParser.NAME)
            self.state = 280
            self.nameList()
            self.state = 281
            self.match(FunctionalStripsParser.T__11)
            self.state = 282
            localctx.theType = self.typename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.PrimTypeContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.PrimTypeContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typename

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTypename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTypename(self)
            else:
                return visitor.visitChildren(self)




    def typename(self):

        localctx = FunctionalStripsParser.TypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typename)
        self._la = 0 # Token type
        try:
            self.state = 294
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                self.match(FunctionalStripsParser.T__0)
                self.state = 285
                self.match(FunctionalStripsParser.T__12)
                self.state = 287 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 286
                    self.primType()
                    self.state = 289 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__7) | (1 << FunctionalStripsParser.T__8) | (1 << FunctionalStripsParser.T__9) | (1 << FunctionalStripsParser.T__10))) != 0) or _la==FunctionalStripsParser.NAME):
                        break

                self.state = 291
                self.match(FunctionalStripsParser.T__2)

            elif token in [FunctionalStripsParser.T__7, FunctionalStripsParser.T__8, FunctionalStripsParser.T__9, FunctionalStripsParser.T__10, FunctionalStripsParser.NAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.primType()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def builtinType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BuiltinTypeContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_primType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPrimType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPrimType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPrimType(self)
            else:
                return visitor.visitChildren(self)




    def primType(self):

        localctx = FunctionalStripsParser.PrimTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primType)
        try:
            self.state = 298
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NAME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.match(FunctionalStripsParser.NAME)

            elif token in [FunctionalStripsParser.T__7, FunctionalStripsParser.T__8, FunctionalStripsParser.T__9, FunctionalStripsParser.T__10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.builtinType()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FunctionDeclGroupContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FunctionDeclGroupContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionsDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionsDef(self)
            else:
                return visitor.visitChildren(self)




    def functionsDef(self):

        localctx = FunctionalStripsParser.FunctionsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_functionsDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(FunctionalStripsParser.T__0)
            self.state = 301
            self.match(FunctionalStripsParser.T__13)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 302
                self.functionDeclGroup()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrimTypeContext,0)


        def atomicFunctionSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.AtomicFunctionSkeletonContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.AtomicFunctionSkeletonContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionDeclGroup

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionDeclGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionDeclGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionDeclGroup(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclGroup(self):

        localctx = FunctionalStripsParser.FunctionDeclGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_functionDeclGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 310
                self.atomicFunctionSkeleton()
                self.state = 313 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.T__0):
                    break

            self.state = 315
            self.match(FunctionalStripsParser.T__11)
            self.state = 316
            self.primType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFunctionSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_atomicFunctionSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtomicFunctionSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtomicFunctionSkeleton(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtomicFunctionSkeleton(self)
            else:
                return visitor.visitChildren(self)




    def atomicFunctionSkeleton(self):

        localctx = FunctionalStripsParser.AtomicFunctionSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atomicFunctionSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(FunctionalStripsParser.T__0)
            self.state = 319
            self.functionSymbol()
            self.state = 320
            self.typedVariableList()
            self.state = 321
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionSymbol(self)
            else:
                return visitor.visitChildren(self)




    def functionSymbol(self):

        localctx = FunctionalStripsParser.FunctionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_functionSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantsDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_constantsDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstantsDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstantsDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstantsDef(self)
            else:
                return visitor.visitChildren(self)




    def constantsDef(self):

        localctx = FunctionalStripsParser.ConstantsDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_constantsDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(FunctionalStripsParser.T__0)
            self.state = 326
            self.match(FunctionalStripsParser.T__14)
            self.state = 327
            self.typedNameList()
            self.state = 328
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicatesDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicFormulaSkeleton(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.AtomicFormulaSkeletonContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.AtomicFormulaSkeletonContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_predicatesDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPredicatesDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPredicatesDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPredicatesDef(self)
            else:
                return visitor.visitChildren(self)




    def predicatesDef(self):

        localctx = FunctionalStripsParser.PredicatesDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_predicatesDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(FunctionalStripsParser.T__0)
            self.state = 331
            self.match(FunctionalStripsParser.T__15)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 332
                self.atomicFormulaSkeleton()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicFormulaSkeletonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicateContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_atomicFormulaSkeleton

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtomicFormulaSkeleton(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtomicFormulaSkeleton(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtomicFormulaSkeleton(self)
            else:
                return visitor.visitChildren(self)




    def atomicFormulaSkeleton(self):

        localctx = FunctionalStripsParser.AtomicFormulaSkeletonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_atomicFormulaSkeleton)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(FunctionalStripsParser.T__0)
            self.state = 341
            self.predicate()
            self.state = 342
            self.typedVariableList()
            self.state = 343
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = FunctionalStripsParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypedVariableListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typedVariableList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexVariableListContext(TypedVariableListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedVariableListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def variableListWithType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.VariableListWithTypeContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.VariableListWithTypeContext,i)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.VARIABLE)
            else:
                return self.getToken(FunctionalStripsParser.VARIABLE, i)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterComplexVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitComplexVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitComplexVariableList(self)
            else:
                return visitor.visitChildren(self)


    class SimpleVariableListContext(TypedVariableListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TypedVariableListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.VARIABLE)
            else:
                return self.getToken(FunctionalStripsParser.VARIABLE, i)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleVariableList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleVariableList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleVariableList(self)
            else:
                return visitor.visitChildren(self)



    def typedVariableList(self):

        localctx = FunctionalStripsParser.TypedVariableListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typedVariableList)
        self._la = 0 # Token type
        try:
            self.state = 364
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.SimpleVariableListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.VARIABLE:
                    self.state = 347
                    self.match(FunctionalStripsParser.VARIABLE)
                    self.state = 352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ComplexVariableListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 354 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 353
                        self.variableListWithType()

                    else:
                        raise NoViableAltException(self)
                    self.state = 356 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.VARIABLE:
                    self.state = 358
                    self.match(FunctionalStripsParser.VARIABLE)
                    self.state = 363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableListWithTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrimTypeContext,0)


        def VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.VARIABLE)
            else:
                return self.getToken(FunctionalStripsParser.VARIABLE, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_variableListWithType

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterVariableListWithType(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitVariableListWithType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitVariableListWithType(self)
            else:
                return visitor.visitChildren(self)




    def variableListWithType(self):

        localctx = FunctionalStripsParser.VariableListWithTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_variableListWithType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 366
                self.match(FunctionalStripsParser.VARIABLE)
                self.state = 369 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.VARIABLE):
                    break

            self.state = 371
            self.match(FunctionalStripsParser.T__11)
            self.state = 372
            self.primType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructureDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionDefContext,0)


        def eventDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EventDefContext,0)


        def durativeActionDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurativeActionDefContext,0)


        def derivedDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DerivedDefContext,0)


        def constraintDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConstraintDefContext,0)


        def processDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessDefContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_structureDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterStructureDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitStructureDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitStructureDef(self)
            else:
                return visitor.visitChildren(self)




    def structureDef(self):

        localctx = FunctionalStripsParser.StructureDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_structureDef)
        try:
            self.state = 380
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.actionDef()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 375
                self.eventDef()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 376
                self.durativeActionDef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 377
                self.derivedDef()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 378
                self.constraintDef()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 379
                self.processDef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_actionDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitActionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitActionDef(self)
            else:
                return visitor.visitChildren(self)




    def actionDef(self):

        localctx = FunctionalStripsParser.ActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_actionDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(FunctionalStripsParser.T__0)
            self.state = 383
            self.match(FunctionalStripsParser.T__16)
            self.state = 384
            self.actionSymbol()
            self.state = 385
            self.match(FunctionalStripsParser.T__17)
            self.state = 386
            self.match(FunctionalStripsParser.T__0)
            self.state = 387
            self.typedVariableList()
            self.state = 388
            self.match(FunctionalStripsParser.T__2)
            self.state = 389
            self.actionDefBody()
            self.state = 390
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraintSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConstraintSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_constraintDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstraintDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstraintDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstraintDef(self)
            else:
                return visitor.visitChildren(self)




    def constraintDef(self):

        localctx = FunctionalStripsParser.ConstraintDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_constraintDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(FunctionalStripsParser.T__0)
            self.state = 393
            self.match(FunctionalStripsParser.T__18)
            self.state = 394
            self.constraintSymbol()
            self.state = 395
            self.match(FunctionalStripsParser.T__17)
            self.state = 396
            self.match(FunctionalStripsParser.T__0)
            self.state = 397
            self.typedVariableList()
            self.state = 398
            self.match(FunctionalStripsParser.T__2)
            self.state = 399
            self.match(FunctionalStripsParser.T__19)
            self.state = 400
            self.goalDesc()
            self.state = 401
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eventSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EventSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def actionDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_eventDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEventDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEventDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEventDef(self)
            else:
                return visitor.visitChildren(self)




    def eventDef(self):

        localctx = FunctionalStripsParser.EventDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_eventDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(FunctionalStripsParser.T__0)
            self.state = 404
            self.match(FunctionalStripsParser.T__20)
            self.state = 405
            self.eventSymbol()
            self.state = 406
            self.match(FunctionalStripsParser.T__17)
            self.state = 407
            self.match(FunctionalStripsParser.T__0)
            self.state = 408
            self.typedVariableList()
            self.state = 409
            self.match(FunctionalStripsParser.T__2)
            self.state = 410
            self.actionDefBody()
            self.state = 411
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_actionSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterActionSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitActionSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitActionSymbol(self)
            else:
                return visitor.visitChildren(self)




    def actionSymbol(self):

        localctx = FunctionalStripsParser.ActionSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_actionSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstraintSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_constraintSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstraintSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstraintSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstraintSymbol(self)
            else:
                return visitor.visitChildren(self)




    def constraintSymbol(self):

        localctx = FunctionalStripsParser.ConstraintSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constraintSymbol)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(FunctionalStripsParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EventSymbolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_eventSymbol

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEventSymbol(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEventSymbol(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEventSymbol(self)
            else:
                return visitor.visitChildren(self)




    def eventSymbol(self):

        localctx = FunctionalStripsParser.EventSymbolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_eventSymbol)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.EXTNAME):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActionDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREC_TAG(self):
            return self.getToken(FunctionalStripsParser.PREC_TAG, 0)

        def precondition(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PreconditionContext,0)


        def EFF_TAG(self):
            return self.getToken(FunctionalStripsParser.EFF_TAG, 0)

        def effect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EffectContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_actionDefBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterActionDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitActionDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitActionDefBody(self)
            else:
                return visitor.visitChildren(self)




    def actionDefBody(self):

        localctx = FunctionalStripsParser.ActionDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_actionDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(FunctionalStripsParser.PREC_TAG)
            self.state = 420
            self.precondition()
            self.state = 421
            self.match(FunctionalStripsParser.EFF_TAG)
            self.state = 422
            self.effect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreconditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_precondition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularPreconditionContext(PreconditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PreconditionContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterRegularPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitRegularPrecondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitRegularPrecondition(self)
            else:
                return visitor.visitChildren(self)


    class TrivialPreconditionContext(PreconditionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PreconditionContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTrivialPrecondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTrivialPrecondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTrivialPrecondition(self)
            else:
                return visitor.visitChildren(self)



    def precondition(self):

        localctx = FunctionalStripsParser.PreconditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_precondition)
        try:
            self.state = 427
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.TrivialPreconditionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(FunctionalStripsParser.T__0)
                self.state = 425
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.RegularPreconditionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.goalDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalDescContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_goalDesc

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AndGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAndGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAndGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAndGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class OrGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterOrGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitOrGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitOrGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class EqualityGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def equality(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EqualityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEqualityGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEqualityGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEqualityGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class UniversalGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUniversalGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUniversalGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUniversalGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def fComp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FCompContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterComparisonGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitComparisonGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitComparisonGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class TermGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ExistentialGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterExistentialGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitExistentialGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitExistentialGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class NotGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNotGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNotGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNotGoalDesc(self)
            else:
                return visitor.visitChildren(self)


    class ImplyGoalDescContext(GoalDescContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GoalDescContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterImplyGoalDesc(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitImplyGoalDesc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitImplyGoalDesc(self)
            else:
                return visitor.visitChildren(self)



    def goalDesc(self):

        localctx = FunctionalStripsParser.GoalDescContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_goalDesc)
        self._la = 0 # Token type
        try:
            self.state = 477
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.TermGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.atomicTermFormula()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.AndGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.match(FunctionalStripsParser.T__0)
                self.state = 431
                self.match(FunctionalStripsParser.T__21)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 432
                    self.goalDesc()
                    self.state = 437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 438
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.OrGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 439
                self.match(FunctionalStripsParser.T__0)
                self.state = 440
                self.match(FunctionalStripsParser.T__22)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 441
                    self.goalDesc()
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 447
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.NotGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 448
                self.match(FunctionalStripsParser.T__0)
                self.state = 449
                self.match(FunctionalStripsParser.T__23)
                self.state = 450
                self.goalDesc()
                self.state = 451
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.ImplyGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 453
                self.match(FunctionalStripsParser.T__0)
                self.state = 454
                self.match(FunctionalStripsParser.T__24)
                self.state = 455
                self.goalDesc()
                self.state = 456
                self.goalDesc()
                self.state = 457
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 6:
                localctx = FunctionalStripsParser.ExistentialGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 459
                self.match(FunctionalStripsParser.T__0)
                self.state = 460
                self.match(FunctionalStripsParser.T__25)
                self.state = 461
                self.match(FunctionalStripsParser.T__0)
                self.state = 462
                self.typedVariableList()
                self.state = 463
                self.match(FunctionalStripsParser.T__2)
                self.state = 464
                self.goalDesc()
                self.state = 465
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 7:
                localctx = FunctionalStripsParser.UniversalGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 467
                self.match(FunctionalStripsParser.T__0)
                self.state = 468
                self.match(FunctionalStripsParser.T__26)
                self.state = 469
                self.match(FunctionalStripsParser.T__0)
                self.state = 470
                self.typedVariableList()
                self.state = 471
                self.match(FunctionalStripsParser.T__2)
                self.state = 472
                self.goalDesc()
                self.state = 473
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 8:
                localctx = FunctionalStripsParser.ComparisonGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 475
                self.fComp()
                pass

            elif la_ == 9:
                localctx = FunctionalStripsParser.EqualityGoalDescContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 476
                self.equality()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_equality

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterEquality(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitEquality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitEquality(self)
            else:
                return visitor.visitChildren(self)




    def equality(self):

        localctx = FunctionalStripsParser.EqualityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_equality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(FunctionalStripsParser.T__0)
            self.state = 480
            self.match(FunctionalStripsParser.T__27)
            self.state = 481
            self.term()
            self.state = 482
            self.term()
            self.state = 483
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryComp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BinaryCompContext,0)


        def fExp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FExpContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fComp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFComp(self)
            else:
                return visitor.visitChildren(self)




    def fComp(self):

        localctx = FunctionalStripsParser.FCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fComp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(FunctionalStripsParser.T__0)
            self.state = 486
            self.binaryComp()
            self.state = 487
            self.fExp()
            self.state = 488
            self.fExp()
            self.state = 489
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTermFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicateContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_atomicTermFormula

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtomicTermFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtomicTermFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtomicTermFormula(self)
            else:
                return visitor.visitChildren(self)




    def atomicTermFormula(self):

        localctx = FunctionalStripsParser.AtomicTermFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_atomicTermFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(FunctionalStripsParser.T__0)
            self.state = 492
            self.predicate()
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.T__28 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (FunctionalStripsParser.NAME - 94)) | (1 << (FunctionalStripsParser.VARIABLE - 94)) | (1 << (FunctionalStripsParser.NUMBER - 94)))) != 0):
                self.state = 493
                self.term()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 499
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_term

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TermObjectContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermObject(self)
            else:
                return visitor.visitChildren(self)


    class TermTimeStepContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermTimeStep(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermTimeStep(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermTimeStep(self)
            else:
                return visitor.visitChildren(self)


    class TermFunctionContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermFunction(self)
            else:
                return visitor.visitChildren(self)


    class TermVariableContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self):
            return self.getToken(FunctionalStripsParser.VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermVariable(self)
            else:
                return visitor.visitChildren(self)


    class TermNumberContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.TermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTermNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTermNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTermNumber(self)
            else:
                return visitor.visitChildren(self)



    def term(self):

        localctx = FunctionalStripsParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_term)
        try:
            self.state = 506
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NAME]:
                localctx = FunctionalStripsParser.TermObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(FunctionalStripsParser.NAME)

            elif token in [FunctionalStripsParser.NUMBER]:
                localctx = FunctionalStripsParser.TermNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.match(FunctionalStripsParser.NUMBER)

            elif token in [FunctionalStripsParser.VARIABLE]:
                localctx = FunctionalStripsParser.TermVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(FunctionalStripsParser.VARIABLE)

            elif token in [FunctionalStripsParser.T__28]:
                localctx = FunctionalStripsParser.TermTimeStepContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__0]:
                localctx = FunctionalStripsParser.TermFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.functionTerm()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_functionTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnaryArithmeticFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FunctionTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryBuiltIn(self):
            return self.getTypedRuleContext(FunctionalStripsParser.UnaryBuiltInContext,0)

        def term(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUnaryArithmeticFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUnaryArithmeticFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUnaryArithmeticFunctionTerm(self)
            else:
                return visitor.visitChildren(self)


    class BinaryArithmeticFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FunctionTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def binaryOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BinaryOpContext,0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBinaryArithmeticFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBinaryArithmeticFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBinaryArithmeticFunctionTerm(self)
            else:
                return visitor.visitChildren(self)


    class GenericFunctionTermContext(FunctionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FunctionTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGenericFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGenericFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGenericFunctionTerm(self)
            else:
                return visitor.visitChildren(self)



    def functionTerm(self):

        localctx = FunctionalStripsParser.FunctionTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_functionTerm)
        self._la = 0 # Token type
        try:
            self.state = 529
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.GenericFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(FunctionalStripsParser.T__0)
                self.state = 509
                self.functionSymbol()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.T__28 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (FunctionalStripsParser.NAME - 94)) | (1 << (FunctionalStripsParser.VARIABLE - 94)) | (1 << (FunctionalStripsParser.NUMBER - 94)))) != 0):
                    self.state = 510
                    self.term()
                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 516
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.BinaryArithmeticFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(FunctionalStripsParser.T__0)
                self.state = 519
                self.binaryOp()
                self.state = 520
                self.term()
                self.state = 521
                self.term()
                self.state = 522
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.UnaryArithmeticFunctionTermContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 524
                self.match(FunctionalStripsParser.T__0)
                self.state = 525
                self.unaryBuiltIn()
                self.state = 526
                self.term()
                self.state = 527
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def processDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessDef(self)
            else:
                return visitor.visitChildren(self)




    def processDef(self):

        localctx = FunctionalStripsParser.ProcessDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_processDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(FunctionalStripsParser.T__0)
            self.state = 532
            self.match(FunctionalStripsParser.T__29)
            self.state = 533
            self.actionSymbol()
            self.state = 534
            self.match(FunctionalStripsParser.T__17)
            self.state = 535
            self.match(FunctionalStripsParser.T__0)
            self.state = 536
            self.typedVariableList()
            self.state = 537
            self.match(FunctionalStripsParser.T__2)
            self.state = 538
            self.processDefBody()
            self.state = 539
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREC_TAG(self):
            return self.getToken(FunctionalStripsParser.PREC_TAG, 0)

        def precondition(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PreconditionContext,0)


        def EFF_TAG(self):
            return self.getToken(FunctionalStripsParser.EFF_TAG, 0)

        def processEffectList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processDefBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessDefBody(self)
            else:
                return visitor.visitChildren(self)




    def processDefBody(self):

        localctx = FunctionalStripsParser.ProcessDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_processDefBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(FunctionalStripsParser.PREC_TAG)
            self.state = 542
            self.precondition()
            self.state = 543
            self.match(FunctionalStripsParser.EFF_TAG)
            self.state = 544
            self.processEffectList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffectList

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProcessSingleEffectContext(ProcessEffectListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessSingleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessSingleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessSingleEffect(self)
            else:
                return visitor.visitChildren(self)


    class ProcessConjunctiveEffectFormulaContext(ProcessEffectListContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectListContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ProcessEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessConjunctiveEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessConjunctiveEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessConjunctiveEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def processEffectList(self):

        localctx = FunctionalStripsParser.ProcessEffectListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_processEffectList)
        self._la = 0 # Token type
        try:
            self.state = 556
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ProcessConjunctiveEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.match(FunctionalStripsParser.T__0)
                self.state = 547
                self.match(FunctionalStripsParser.T__21)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 548
                    self.processEffect()
                    self.state = 553
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 554
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ProcessSingleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.processEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProcessAssignEffectContext(ProcessEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processEffectOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectOpContext,0)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)

        def processEffectExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessEffectExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessAssignEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessAssignEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessAssignEffect(self)
            else:
                return visitor.visitChildren(self)



    def processEffect(self):

        localctx = FunctionalStripsParser.ProcessEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_processEffect)
        try:
            localctx = FunctionalStripsParser.ProcessAssignEffectContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(FunctionalStripsParser.T__0)
            self.state = 559
            self.processEffectOp()
            self.state = 560
            self.functionTerm()
            self.state = 561
            self.processEffectExp()
            self.state = 562
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurativeActionDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ActionSymbolContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def daDefBody(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaDefBodyContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durativeActionDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurativeActionDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurativeActionDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurativeActionDef(self)
            else:
                return visitor.visitChildren(self)




    def durativeActionDef(self):

        localctx = FunctionalStripsParser.DurativeActionDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_durativeActionDef)
        try:
            self.state = 583
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(FunctionalStripsParser.T__0)
                self.state = 565
                self.match(FunctionalStripsParser.T__30)
                self.state = 566
                self.actionSymbol()
                self.state = 567
                self.match(FunctionalStripsParser.T__17)
                self.state = 568
                self.match(FunctionalStripsParser.T__0)
                self.state = 569
                self.typedVariableList()
                self.state = 570
                self.match(FunctionalStripsParser.T__2)
                self.state = 571
                self.daDefBody()
                self.state = 572
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.match(FunctionalStripsParser.T__0)
                self.state = 575
                self.match(FunctionalStripsParser.T__30)
                self.state = 576
                self.actionSymbol()
                self.state = 577
                self.match(FunctionalStripsParser.T__17)
                self.state = 578
                self.match(FunctionalStripsParser.T__0)
                self.state = 579
                self.match(FunctionalStripsParser.T__2)
                self.state = 580
                self.daDefBody()
                self.state = 581
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaDefBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durationConstraint(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurationConstraintContext,0)


        def daGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaGDContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaEffectContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_daDefBody

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDaDefBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDaDefBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDaDefBody(self)
            else:
                return visitor.visitChildren(self)




    def daDefBody(self):

        localctx = FunctionalStripsParser.DaDefBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_daDefBody)
        try:
            self.state = 599
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.match(FunctionalStripsParser.T__31)
                self.state = 586
                self.durationConstraint()

            elif token in [FunctionalStripsParser.T__19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 587
                self.match(FunctionalStripsParser.T__19)
                self.state = 591
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 588
                    self.match(FunctionalStripsParser.T__0)
                    self.state = 589
                    self.match(FunctionalStripsParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 590
                    self.daGD()
                    pass



            elif token in [FunctionalStripsParser.EFF_TAG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 593
                self.match(FunctionalStripsParser.EFF_TAG)
                self.state = 597
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 594
                    self.match(FunctionalStripsParser.T__0)
                    self.state = 595
                    self.match(FunctionalStripsParser.T__2)
                    pass

                elif la_ == 2:
                    self.state = 596
                    self.daEffect()
                    pass



            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefTimedGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrefTimedGDContext,0)


        def daGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.DaGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.DaGDContext,i)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_daGD

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDaGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDaGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDaGD(self)
            else:
                return visitor.visitChildren(self)




    def daGD(self):

        localctx = FunctionalStripsParser.DaGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_daGD)
        self._la = 0 # Token type
        try:
            self.state = 619
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 601
                self.prefTimedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 602
                self.match(FunctionalStripsParser.T__0)
                self.state = 603
                self.match(FunctionalStripsParser.T__21)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 604
                    self.daGD()
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 610
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 611
                self.match(FunctionalStripsParser.T__0)
                self.state = 612
                self.match(FunctionalStripsParser.T__26)
                self.state = 613
                self.match(FunctionalStripsParser.T__0)
                self.state = 614
                self.typedVariableList()
                self.state = 615
                self.match(FunctionalStripsParser.T__2)
                self.state = 616
                self.daGD()
                self.state = 617
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefTimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timedGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimedGDContext,0)


        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_prefTimedGD

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPrefTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPrefTimedGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPrefTimedGD(self)
            else:
                return visitor.visitChildren(self)




    def prefTimedGD(self):

        localctx = FunctionalStripsParser.PrefTimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_prefTimedGD)
        self._la = 0 # Token type
        try:
            self.state = 630
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.timedGD()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.match(FunctionalStripsParser.T__0)
                self.state = 623
                self.match(FunctionalStripsParser.T__32)
                self.state = 625
                _la = self._input.LA(1)
                if _la==FunctionalStripsParser.NAME:
                    self.state = 624
                    self.match(FunctionalStripsParser.NAME)


                self.state = 627
                self.timedGD()
                self.state = 628
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimeSpecifierContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def interval(self):
            return self.getTypedRuleContext(FunctionalStripsParser.IntervalContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_timedGD

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTimedGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTimedGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTimedGD(self)
            else:
                return visitor.visitChildren(self)




    def timedGD(self):

        localctx = FunctionalStripsParser.TimedGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_timedGD)
        try:
            self.state = 644
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.match(FunctionalStripsParser.T__0)
                self.state = 633
                self.match(FunctionalStripsParser.T__33)
                self.state = 634
                self.timeSpecifier()
                self.state = 635
                self.goalDesc()
                self.state = 636
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.match(FunctionalStripsParser.T__0)
                self.state = 639
                self.match(FunctionalStripsParser.T__34)
                self.state = 640
                self.interval()
                self.state = 641
                self.goalDesc()
                self.state = 642
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_timeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTimeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTimeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTimeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def timeSpecifier(self):

        localctx = FunctionalStripsParser.TimeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_timeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__35 or _la==FunctionalStripsParser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = FunctionalStripsParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(FunctionalStripsParser.T__37)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DerivedDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_derivedDef

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDerivedDef(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDerivedDef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDerivedDef(self)
            else:
                return visitor.visitChildren(self)




    def derivedDef(self):

        localctx = FunctionalStripsParser.DerivedDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_derivedDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(FunctionalStripsParser.T__0)
            self.state = 651
            self.match(FunctionalStripsParser.T__38)
            self.state = 652
            self.typedVariableList()
            self.state = 653
            self.goalDesc()
            self.state = 654
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionExpr(self)
            else:
                return visitor.visitChildren(self)


    class NumericConstantExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterNumericConstantExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitNumericConstantExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitNumericConstantExpr(self)
            else:
                return visitor.visitChildren(self)


    class VariableExprContext(FExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.FExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def VARIABLE(self):
            return self.getToken(FunctionalStripsParser.VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterVariableExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitVariableExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitVariableExpr(self)
            else:
                return visitor.visitChildren(self)



    def fExp(self):

        localctx = FunctionalStripsParser.FExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fExp)
        try:
            self.state = 659
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__0]:
                localctx = FunctionalStripsParser.FunctionExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.functionTerm()

            elif token in [FunctionalStripsParser.NUMBER]:
                localctx = FunctionalStripsParser.NumericConstantExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.match(FunctionalStripsParser.NUMBER)

            elif token in [FunctionalStripsParser.VARIABLE]:
                localctx = FunctionalStripsParser.VariableExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 658
                self.match(FunctionalStripsParser.VARIABLE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffectExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionalProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processFunctionEff(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessFunctionEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionalProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionalProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionalProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)


    class ConstProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processConstEff(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessConstEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConstProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConstProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConstProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)


    class VariableProcessEffectExprContext(ProcessEffectExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ProcessEffectExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def processVarEff(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProcessVarEffContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterVariableProcessEffectExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitVariableProcessEffectExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitVariableProcessEffectExpr(self)
            else:
                return visitor.visitChildren(self)



    def processEffectExp(self):

        localctx = FunctionalStripsParser.ProcessEffectExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_processEffectExp)
        try:
            self.state = 676
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.FunctionalProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.match(FunctionalStripsParser.T__0)
                self.state = 662
                self.match(FunctionalStripsParser.T__39)
                self.state = 663
                self.processFunctionEff()
                self.state = 664
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ConstProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(FunctionalStripsParser.T__0)
                self.state = 667
                self.match(FunctionalStripsParser.T__39)
                self.state = 668
                self.processConstEff()
                self.state = 669
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.VariableProcessEffectExprContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self.match(FunctionalStripsParser.T__0)
                self.state = 672
                self.match(FunctionalStripsParser.T__39)
                self.state = 673
                self.processVarEff()
                self.state = 674
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessFunctionEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processFunctionEff

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessFunctionEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessFunctionEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessFunctionEff(self)
            else:
                return visitor.visitChildren(self)




    def processFunctionEff(self):

        localctx = FunctionalStripsParser.ProcessFunctionEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_processFunctionEff)
        try:
            self.state = 683
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.T__0]:
                self.enterOuterAlt(localctx, 1)
                self.state = 678
                self.functionTerm()
                self.state = 679
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.match(FunctionalStripsParser.T__28)
                self.state = 682
                self.functionTerm()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessConstEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processConstEff

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessConstEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessConstEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessConstEff(self)
            else:
                return visitor.visitChildren(self)




    def processConstEff(self):

        localctx = FunctionalStripsParser.ProcessConstEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_processConstEff)
        try:
            self.state = 689
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 686
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 687
                self.match(FunctionalStripsParser.T__28)
                self.state = 688
                self.match(FunctionalStripsParser.NUMBER)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessVarEffContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARIABLE(self):
            return self.getToken(FunctionalStripsParser.VARIABLE, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processVarEff

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessVarEff(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessVarEff(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessVarEff(self)
            else:
                return visitor.visitChildren(self)




    def processVarEff(self):

        localctx = FunctionalStripsParser.ProcessVarEffContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_processVarEff)
        try:
            self.state = 695
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.VARIABLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.match(FunctionalStripsParser.VARIABLE)
                self.state = 692
                self.match(FunctionalStripsParser.T__28)

            elif token in [FunctionalStripsParser.T__28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.match(FunctionalStripsParser.T__28)
                self.state = 694
                self.match(FunctionalStripsParser.VARIABLE)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)


        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fHead

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFHead(self)
            else:
                return visitor.visitChildren(self)




    def fHead(self):

        localctx = FunctionalStripsParser.FHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(FunctionalStripsParser.T__0)
            self.state = 698
            self.functionSymbol()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.T__28 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (FunctionalStripsParser.NAME - 94)) | (1 << (FunctionalStripsParser.VARIABLE - 94)) | (1 << (FunctionalStripsParser.NUMBER - 94)))) != 0):
                self.state = 699
                self.term()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 705
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_effect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleEffectContext(EffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.EffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def cEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.CEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSingleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSingleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSingleEffect(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctiveEffectFormulaContext(EffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.EffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def cEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.CEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.CEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjunctiveEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjunctiveEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjunctiveEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def effect(self):

        localctx = FunctionalStripsParser.EffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_effect)
        self._la = 0 # Token type
        try:
            self.state = 717
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjunctiveEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.match(FunctionalStripsParser.T__0)
                self.state = 708
                self.match(FunctionalStripsParser.T__21)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 709
                    self.cEffect()
                    self.state = 714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 715
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.SingleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 716
                self.cEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_cEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ConditionalEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)

        def condEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.CondEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConditionalEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConditionalEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConditionalEffect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def pEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleEffect(self)
            else:
                return visitor.visitChildren(self)


    class UniversallyQuantifiedEffectContext(CEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def effect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.EffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUniversallyQuantifiedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUniversallyQuantifiedEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUniversallyQuantifiedEffect(self)
            else:
                return visitor.visitChildren(self)



    def cEffect(self):

        localctx = FunctionalStripsParser.CEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_cEffect)
        try:
            self.state = 734
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.UniversallyQuantifiedEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.match(FunctionalStripsParser.T__0)
                self.state = 720
                self.match(FunctionalStripsParser.T__26)
                self.state = 721
                self.match(FunctionalStripsParser.T__0)
                self.state = 722
                self.typedVariableList()
                self.state = 723
                self.match(FunctionalStripsParser.T__2)
                self.state = 724
                self.effect()
                self.state = 725
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ConditionalEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.match(FunctionalStripsParser.T__0)
                self.state = 728
                self.match(FunctionalStripsParser.T__40)
                self.state = 729
                self.goalDesc()
                self.state = 730
                self.condEffect()
                self.state = 731
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.SimpleEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 733
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_pEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AssignUndefinedContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignUndefined(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignUndefined(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignUndefined(self)
            else:
                return visitor.visitChildren(self)


    class AssertNegationEffectContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssertNegationEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssertNegationEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssertNegationEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssignEffectContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)

        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssertEffectContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def atomicTermFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AtomicTermFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssertEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssertEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssertEffect(self)
            else:
                return visitor.visitChildren(self)


    class AssignConstantContext(PEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)

        def term(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignConstant(self)
            else:
                return visitor.visitChildren(self)



    def pEffect(self):

        localctx = FunctionalStripsParser.PEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_pEffect)
        try:
            self.state = 760
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.AssignEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self.match(FunctionalStripsParser.T__0)
                self.state = 737
                self.assignOp()
                self.state = 738
                self.functionTerm()
                self.state = 739
                self.fExp()
                self.state = 740
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.AssertNegationEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.match(FunctionalStripsParser.T__0)
                self.state = 743
                self.match(FunctionalStripsParser.T__23)
                self.state = 744
                self.atomicTermFormula()
                self.state = 745
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.AssertEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 747
                self.atomicTermFormula()
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.AssignConstantContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 748
                self.match(FunctionalStripsParser.T__0)
                self.state = 749
                self.match(FunctionalStripsParser.T__41)
                self.state = 750
                self.functionTerm()
                self.state = 751
                self.term()
                self.state = 752
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.AssignUndefinedContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 754
                self.match(FunctionalStripsParser.T__0)
                self.state = 755
                self.match(FunctionalStripsParser.T__41)
                self.state = 756
                self.functionTerm()
                self.state = 757
                self.match(FunctionalStripsParser.T__42)
                self.state = 758
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CondEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_condEffect

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SingleConditionalEffectContext(CondEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CondEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def pEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PEffectContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSingleConditionalEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSingleConditionalEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSingleConditionalEffect(self)
            else:
                return visitor.visitChildren(self)


    class ConjConditionalEffectFormulaContext(CondEffectContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.CondEffectContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def pEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.PEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.PEffectContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjConditionalEffectFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjConditionalEffectFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjConditionalEffectFormula(self)
            else:
                return visitor.visitChildren(self)



    def condEffect(self):

        localctx = FunctionalStripsParser.CondEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_condEffect)
        self._la = 0 # Token type
        try:
            self.state = 772
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjConditionalEffectFormulaContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(FunctionalStripsParser.T__0)
                self.state = 763
                self.match(FunctionalStripsParser.T__21)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 764
                    self.pEffect()
                    self.state = 769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 770
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.SingleConditionalEffectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.pEffect()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_binaryOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBinaryOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBinaryOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBinaryOp(self)
            else:
                return visitor.visitChildren(self)




    def binaryOp(self):

        localctx = FunctionalStripsParser.BinaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_binaryOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__11) | (1 << FunctionalStripsParser.T__39) | (1 << FunctionalStripsParser.T__43) | (1 << FunctionalStripsParser.T__44) | (1 << FunctionalStripsParser.T__45) | (1 << FunctionalStripsParser.T__46) | (1 << FunctionalStripsParser.T__47))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryBuiltInContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_unaryBuiltIn

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUnaryBuiltIn(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUnaryBuiltIn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUnaryBuiltIn(self)
            else:
                return visitor.visitChildren(self)




    def unaryBuiltIn(self):

        localctx = FunctionalStripsParser.UnaryBuiltInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unaryBuiltIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__11) | (1 << FunctionalStripsParser.T__48) | (1 << FunctionalStripsParser.T__49) | (1 << FunctionalStripsParser.T__50) | (1 << FunctionalStripsParser.T__51) | (1 << FunctionalStripsParser.T__52) | (1 << FunctionalStripsParser.T__53) | (1 << FunctionalStripsParser.T__54) | (1 << FunctionalStripsParser.T__55) | (1 << FunctionalStripsParser.T__56))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_multiOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterMultiOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitMultiOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitMultiOp(self)
            else:
                return visitor.visitChildren(self)




    def multiOp(self):

        localctx = FunctionalStripsParser.MultiOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_multiOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__39 or _la==FunctionalStripsParser.T__43):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinaryCompContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_binaryComp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBinaryComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBinaryComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBinaryComp(self)
            else:
                return visitor.visitChildren(self)




    def binaryComp(self):

        localctx = FunctionalStripsParser.BinaryCompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_binaryComp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__27) | (1 << FunctionalStripsParser.T__57) | (1 << FunctionalStripsParser.T__58) | (1 << FunctionalStripsParser.T__59) | (1 << FunctionalStripsParser.T__60))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_assignOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAssignOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAssignOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAssignOp(self)
            else:
                return visitor.visitChildren(self)




    def assignOp(self):

        localctx = FunctionalStripsParser.AssignOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_assignOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            _la = self._input.LA(1)
            if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (FunctionalStripsParser.T__41 - 42)) | (1 << (FunctionalStripsParser.T__61 - 42)) | (1 << (FunctionalStripsParser.T__62 - 42)) | (1 << (FunctionalStripsParser.T__63 - 42)) | (1 << (FunctionalStripsParser.T__64 - 42)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcessEffectOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_processEffectOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProcessEffectOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProcessEffectOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProcessEffectOp(self)
            else:
                return visitor.visitChildren(self)




    def processEffectOp(self):

        localctx = FunctionalStripsParser.ProcessEffectOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_processEffectOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__63 or _la==FunctionalStripsParser.T__64):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDurationConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.SimpleDurationConstraintContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.SimpleDurationConstraintContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurationConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurationConstraint(self)
            else:
                return visitor.visitChildren(self)




    def durationConstraint(self):

        localctx = FunctionalStripsParser.DurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_durationConstraint)
        self._la = 0 # Token type
        try:
            self.state = 798
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.match(FunctionalStripsParser.T__0)
                self.state = 787
                self.match(FunctionalStripsParser.T__21)
                self.state = 789 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 788
                    self.simpleDurationConstraint()
                    self.state = 791 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FunctionalStripsParser.T__0):
                        break

                self.state = 793
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 795
                self.match(FunctionalStripsParser.T__0)
                self.state = 796
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 797
                self.simpleDurationConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDurationConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def durOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurOpContext,0)


        def durValue(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DurValueContext,0)


        def timeSpecifier(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimeSpecifierContext,0)


        def simpleDurationConstraint(self):
            return self.getTypedRuleContext(FunctionalStripsParser.SimpleDurationConstraintContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_simpleDurationConstraint

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSimpleDurationConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSimpleDurationConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSimpleDurationConstraint(self)
            else:
                return visitor.visitChildren(self)




    def simpleDurationConstraint(self):

        localctx = FunctionalStripsParser.SimpleDurationConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_simpleDurationConstraint)
        try:
            self.state = 812
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.match(FunctionalStripsParser.T__0)
                self.state = 801
                self.durOp()
                self.state = 802
                self.match(FunctionalStripsParser.T__65)
                self.state = 803
                self.durValue()
                self.state = 804
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 806
                self.match(FunctionalStripsParser.T__0)
                self.state = 807
                self.match(FunctionalStripsParser.T__33)
                self.state = 808
                self.timeSpecifier()
                self.state = 809
                self.simpleDurationConstraint()
                self.state = 810
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durOp

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurOp(self)
            else:
                return visitor.visitChildren(self)




    def durOp(self):

        localctx = FunctionalStripsParser.DurOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_durOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << FunctionalStripsParser.T__27) | (1 << FunctionalStripsParser.T__59) | (1 << FunctionalStripsParser.T__60))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DurValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_durValue

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDurValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDurValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDurValue(self)
            else:
                return visitor.visitChildren(self)




    def durValue(self):

        localctx = FunctionalStripsParser.DurValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_durValue)
        try:
            self.state = 818
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.match(FunctionalStripsParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DaEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def daEffect(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.DaEffectContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.DaEffectContext,i)


        def timedEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimedEffectContext,0)


        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)


        def daGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaGDContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpDAContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_daEffect

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterDaEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitDaEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitDaEffect(self)
            else:
                return visitor.visitChildren(self)




    def daEffect(self):

        localctx = FunctionalStripsParser.DaEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_daEffect)
        self._la = 0 # Token type
        try:
            self.state = 850
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.match(FunctionalStripsParser.T__0)
                self.state = 821
                self.match(FunctionalStripsParser.T__21)
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 822
                    self.daEffect()
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 828
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.timedEffect()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 830
                self.match(FunctionalStripsParser.T__0)
                self.state = 831
                self.match(FunctionalStripsParser.T__26)
                self.state = 832
                self.match(FunctionalStripsParser.T__0)
                self.state = 833
                self.typedVariableList()
                self.state = 834
                self.match(FunctionalStripsParser.T__2)
                self.state = 835
                self.daEffect()
                self.state = 836
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 838
                self.match(FunctionalStripsParser.T__0)
                self.state = 839
                self.match(FunctionalStripsParser.T__40)
                self.state = 840
                self.daGD()
                self.state = 841
                self.timedEffect()
                self.state = 842
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 844
                self.match(FunctionalStripsParser.T__0)
                self.state = 845
                self.assignOp()
                self.state = 846
                self.fHead()
                self.state = 847
                self.fExpDA()
                self.state = 848
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimedEffectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeSpecifier(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TimeSpecifierContext,0)


        def daEffect(self):
            return self.getTypedRuleContext(FunctionalStripsParser.DaEffectContext,0)


        def fAssignDA(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FAssignDAContext,0)


        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FHeadContext,0)


        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_timedEffect

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTimedEffect(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTimedEffect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTimedEffect(self)
            else:
                return visitor.visitChildren(self)




    def timedEffect(self):

        localctx = FunctionalStripsParser.TimedEffectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_timedEffect)
        try:
            self.state = 870
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.match(FunctionalStripsParser.T__0)
                self.state = 853
                self.match(FunctionalStripsParser.T__33)
                self.state = 854
                self.timeSpecifier()
                self.state = 855
                self.daEffect()
                self.state = 856
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 858
                self.match(FunctionalStripsParser.T__0)
                self.state = 859
                self.match(FunctionalStripsParser.T__33)
                self.state = 860
                self.timeSpecifier()
                self.state = 861
                self.fAssignDA()
                self.state = 862
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 864
                self.match(FunctionalStripsParser.T__0)
                self.state = 865
                self.assignOp()
                self.state = 866
                self.fHead()
                self.state = 867
                self.fExp()
                self.state = 868
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FAssignDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.AssignOpContext,0)


        def fHead(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FHeadContext,0)


        def fExpDA(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpDAContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fAssignDA

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFAssignDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFAssignDA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFAssignDA(self)
            else:
                return visitor.visitChildren(self)




    def fAssignDA(self):

        localctx = FunctionalStripsParser.FAssignDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fAssignDA)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self.match(FunctionalStripsParser.T__0)
            self.state = 873
            self.assignOp()
            self.state = 874
            self.fHead()
            self.state = 875
            self.fExpDA()
            self.state = 876
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FExpDAContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binaryOp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BinaryOpContext,0)


        def fExpDA(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.FExpDAContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.FExpDAContext,i)


        def fExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FExpContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_fExpDA

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFExpDA(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFExpDA(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFExpDA(self)
            else:
                return visitor.visitChildren(self)




    def fExpDA(self):

        localctx = FunctionalStripsParser.FExpDAContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fExpDA)
        try:
            self.state = 891
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(FunctionalStripsParser.T__0)
                self.state = 885
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 879
                    self.binaryOp()
                    self.state = 880
                    self.fExpDA()
                    self.state = 881
                    self.fExpDA()
                    pass

                elif la_ == 2:
                    self.state = 883
                    self.match(FunctionalStripsParser.T__11)
                    self.state = 884
                    self.fExpDA()
                    pass


                self.state = 887
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.match(FunctionalStripsParser.T__65)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 890
                self.fExp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def problemDecl(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProblemDeclContext,0)


        def problemDomain(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProblemDomainContext,0)


        def init(self):
            return self.getTypedRuleContext(FunctionalStripsParser.InitContext,0)


        def goal(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalContext,0)


        def requireDef(self):
            return self.getTypedRuleContext(FunctionalStripsParser.RequireDefContext,0)


        def objectDecl(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ObjectDeclContext,0)


        def problemMeta(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ProblemMetaContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ProblemMetaContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problem

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblem(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblem(self)
            else:
                return visitor.visitChildren(self)




    def problem(self):

        localctx = FunctionalStripsParser.ProblemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_problem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(FunctionalStripsParser.T__0)
            self.state = 894
            self.match(FunctionalStripsParser.T__1)
            self.state = 895
            self.problemDecl()
            self.state = 896
            self.problemDomain()
            self.state = 898
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                self.state = 897
                self.requireDef()


            self.state = 901
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 900
                self.objectDecl()


            self.state = 903
            self.init()
            self.state = 904
            self.goal()
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 905
                self.problemMeta()
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 911
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemMetaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def probConstraints(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ProbConstraintsContext,0)


        def boundsDecl(self):
            return self.getTypedRuleContext(FunctionalStripsParser.BoundsDeclContext,0)


        def metricSpec(self):
            return self.getTypedRuleContext(FunctionalStripsParser.MetricSpecContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problemMeta

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemMeta(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemMeta(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemMeta(self)
            else:
                return visitor.visitChildren(self)




    def problemMeta(self):

        localctx = FunctionalStripsParser.ProblemMetaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_problemMeta)
        try:
            self.state = 916
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.probConstraints()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.boundsDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.metricSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problemDecl

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemDecl(self)
            else:
                return visitor.visitChildren(self)




    def problemDecl(self):

        localctx = FunctionalStripsParser.ProblemDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_problemDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(FunctionalStripsParser.T__0)
            self.state = 919
            self.match(FunctionalStripsParser.T__66)
            self.state = 920
            self.match(FunctionalStripsParser.NAME)
            self.state = 921
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProblemDomainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_problemDomain

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemDomain(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemDomain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemDomain(self)
            else:
                return visitor.visitChildren(self)




    def problemDomain(self):

        localctx = FunctionalStripsParser.ProblemDomainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_problemDomain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(FunctionalStripsParser.T__0)
            self.state = 924
            self.match(FunctionalStripsParser.T__67)
            self.state = 925
            self.match(FunctionalStripsParser.NAME)
            self.state = 926
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedNameList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedNameListContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_objectDecl

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterObjectDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitObjectDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitObjectDecl(self)
            else:
                return visitor.visitChildren(self)




    def objectDecl(self):

        localctx = FunctionalStripsParser.ObjectDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_objectDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(FunctionalStripsParser.T__0)
            self.state = 929
            self.match(FunctionalStripsParser.T__68)
            self.state = 930
            self.typedNameList()
            self.state = 931
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BoundsDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeBoundsDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.TypeBoundsDefinitionContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.TypeBoundsDefinitionContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_boundsDecl

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterBoundsDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitBoundsDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitBoundsDecl(self)
            else:
                return visitor.visitChildren(self)




    def boundsDecl(self):

        localctx = FunctionalStripsParser.BoundsDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_boundsDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(FunctionalStripsParser.T__0)
            self.state = 934
            self.match(FunctionalStripsParser.T__69)
            self.state = 936 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 935
                self.typeBoundsDefinition()
                self.state = 938 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==FunctionalStripsParser.T__0):
                    break

            self.state = 940
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeBoundsDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def numericBuiltinType(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NumericBuiltinTypeContext,0)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.NUMBER)
            else:
                return self.getToken(FunctionalStripsParser.NUMBER, i)

        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_typeBoundsDefinition

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTypeBoundsDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTypeBoundsDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTypeBoundsDefinition(self)
            else:
                return visitor.visitChildren(self)




    def typeBoundsDefinition(self):

        localctx = FunctionalStripsParser.TypeBoundsDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeBoundsDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.match(FunctionalStripsParser.T__0)
            self.state = 943
            self.match(FunctionalStripsParser.NAME)
            self.state = 944
            self.match(FunctionalStripsParser.T__11)
            self.state = 945
            self.numericBuiltinType()
            self.state = 946
            self.match(FunctionalStripsParser.T__70)
            self.state = 947
            self.match(FunctionalStripsParser.NUMBER)
            self.state = 948
            self.match(FunctionalStripsParser.T__71)
            self.state = 949
            self.match(FunctionalStripsParser.NUMBER)
            self.state = 950
            self.match(FunctionalStripsParser.T__72)
            self.state = 951
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initEl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.InitElContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.InitElContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = FunctionalStripsParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_init)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(FunctionalStripsParser.T__0)
            self.state = 954
            self.match(FunctionalStripsParser.T__73)
            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0:
                self.state = 955
                self.initEl()
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 961
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_groundTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GroundTermNumberContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GroundTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundTermNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundTermNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundTermNumber(self)
            else:
                return visitor.visitChildren(self)


    class GroundTermFunctionContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GroundTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundTermFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundTermFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundTermFunction(self)
            else:
                return visitor.visitChildren(self)


    class GroundTermObjectContext(GroundTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.GroundTermContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundTermObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundTermObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundTermObject(self)
            else:
                return visitor.visitChildren(self)



    def groundTerm(self):

        localctx = FunctionalStripsParser.GroundTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_groundTerm)
        try:
            self.state = 966
            token = self._input.LA(1)
            if token in [FunctionalStripsParser.NAME]:
                localctx = FunctionalStripsParser.GroundTermObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 963
                self.match(FunctionalStripsParser.NAME)

            elif token in [FunctionalStripsParser.NUMBER]:
                localctx = FunctionalStripsParser.GroundTermNumberContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 964
                self.match(FunctionalStripsParser.NUMBER)

            elif token in [FunctionalStripsParser.T__0]:
                localctx = FunctionalStripsParser.GroundTermFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 965
                self.groundFunctionTerm()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundFunctionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionSymbol(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionSymbolContext,0)


        def groundTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GroundTermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GroundTermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_groundFunctionTerm

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundFunctionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundFunctionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundFunctionTerm(self)
            else:
                return visitor.visitChildren(self)




    def groundFunctionTerm(self):

        localctx = FunctionalStripsParser.GroundFunctionTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_groundFunctionTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(FunctionalStripsParser.T__0)
            self.state = 969
            self.functionSymbol()
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.NUMBER:
                self.state = 970
                self.groundTerm()
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 976
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitElContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_initEl

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitLiteralContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def nameLiteral(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitAssignmentNumericContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,0)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitAssignmentNumeric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitAssignmentNumeric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitAssignmentNumeric(self)
            else:
                return visitor.visitChildren(self)


    class InitTimedLiteralContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def nameLiteral(self):
            return self.getTypedRuleContext(FunctionalStripsParser.NameLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitTimedLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitTimedLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitTimedLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitAssignmentObjectContext(InitElContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.InitElContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundFunctionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,0)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitAssignmentObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitAssignmentObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitAssignmentObject(self)
            else:
                return visitor.visitChildren(self)



    def initEl(self):

        localctx = FunctionalStripsParser.InitElContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_initEl)
        try:
            self.state = 997
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.InitLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 978
                self.nameLiteral()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.InitAssignmentNumericContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 979
                self.match(FunctionalStripsParser.T__0)
                self.state = 980
                self.match(FunctionalStripsParser.T__27)
                self.state = 981
                self.groundFunctionTerm()
                self.state = 982
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 983
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.InitTimedLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                self.match(FunctionalStripsParser.T__0)
                self.state = 986
                self.match(FunctionalStripsParser.T__33)
                self.state = 987
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 988
                self.nameLiteral()
                self.state = 989
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.InitAssignmentObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 991
                self.match(FunctionalStripsParser.T__0)
                self.state = 992
                self.match(FunctionalStripsParser.T__27)
                self.state = 993
                self.groundFunctionTerm()
                self.state = 994
                self.match(FunctionalStripsParser.NAME)
                self.state = 995
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_nameLiteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InitNegativeLiteralContext(NameLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NameLiteralContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundAtomicFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundAtomicFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitNegativeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitNegativeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitNegativeLiteral(self)
            else:
                return visitor.visitChildren(self)


    class InitPositiveLiteralContext(NameLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.NameLiteralContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def groundAtomicFormula(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GroundAtomicFormulaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterInitPositiveLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitInitPositiveLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitInitPositiveLiteral(self)
            else:
                return visitor.visitChildren(self)



    def nameLiteral(self):

        localctx = FunctionalStripsParser.NameLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_nameLiteral)
        try:
            self.state = 1005
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.InitPositiveLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 999
                self.groundAtomicFormula()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.InitNegativeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1000
                self.match(FunctionalStripsParser.T__0)
                self.state = 1001
                self.match(FunctionalStripsParser.T__23)
                self.state = 1002
                self.groundAtomicFormula()
                self.state = 1003
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroundAtomicFormulaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PredicateContext,0)


        def groundTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GroundTermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GroundTermContext,i)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_groundAtomicFormula

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGroundAtomicFormula(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGroundAtomicFormula(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGroundAtomicFormula(self)
            else:
                return visitor.visitChildren(self)




    def groundAtomicFormula(self):

        localctx = FunctionalStripsParser.GroundAtomicFormulaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_groundAtomicFormula)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(FunctionalStripsParser.T__0)
            self.state = 1008
            self.predicate()
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==FunctionalStripsParser.T__0 or _la==FunctionalStripsParser.NAME or _la==FunctionalStripsParser.NUMBER:
                self.state = 1009
                self.groundTerm()
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1015
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_goal

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterGoal(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitGoal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitGoal(self)
            else:
                return visitor.visitChildren(self)




    def goal(self):

        localctx = FunctionalStripsParser.GoalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_goal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(FunctionalStripsParser.T__0)
            self.state = 1018
            self.match(FunctionalStripsParser.T__74)
            self.state = 1019
            self.goalDesc()
            self.state = 1020
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProbConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefConGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrefConGDContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_probConstraints

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProbConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProbConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProbConstraints(self)
            else:
                return visitor.visitChildren(self)




    def probConstraints(self):

        localctx = FunctionalStripsParser.ProbConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_probConstraints)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(FunctionalStripsParser.T__0)
            self.state = 1023
            self.match(FunctionalStripsParser.T__75)
            self.state = 1024
            self.prefConGD()
            self.state = 1025
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_prefConGD

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniversallyQuantifiedConstraintContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def prefConGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.PrefConGDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterUniversallyQuantifiedConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitUniversallyQuantifiedConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitUniversallyQuantifiedConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PlainConstraintListContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ConGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPlainConstraintList(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPlainConstraintList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPlainConstraintList(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctionOfConstraintsContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def prefConGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.PrefConGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.PrefConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjunctionOfConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjunctionOfConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjunctionOfConstraints(self)
            else:
                return visitor.visitChildren(self)


    class PreferenceConstraintContext(PrefConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.PrefConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,0)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterPreferenceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitPreferenceConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitPreferenceConstraint(self)
            else:
                return visitor.visitChildren(self)



    def prefConGD(self):

        localctx = FunctionalStripsParser.PrefConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_prefConGD)
        self._la = 0 # Token type
        try:
            self.state = 1057
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjunctionOfConstraintsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                self.match(FunctionalStripsParser.T__0)
                self.state = 1028
                self.match(FunctionalStripsParser.T__21)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==FunctionalStripsParser.T__0:
                    self.state = 1029
                    self.prefConGD()
                    self.state = 1034
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1035
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.UniversallyQuantifiedConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1036
                self.match(FunctionalStripsParser.T__0)
                self.state = 1037
                self.match(FunctionalStripsParser.T__26)
                self.state = 1038
                self.match(FunctionalStripsParser.T__0)
                self.state = 1039
                self.typedVariableList()
                self.state = 1040
                self.match(FunctionalStripsParser.T__2)
                self.state = 1041
                self.prefConGD()
                self.state = 1042
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.PreferenceConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.match(FunctionalStripsParser.T__0)
                self.state = 1045
                self.match(FunctionalStripsParser.T__32)
                self.state = 1047
                _la = self._input.LA(1)
                if _la==FunctionalStripsParser.NAME:
                    self.state = 1046
                    self.match(FunctionalStripsParser.NAME)


                self.state = 1049
                self.conGD()
                self.state = 1050
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.PlainConstraintListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1053 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1052
                        self.conGD()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1055 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_metricSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ProblemMetricContext(MetricSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricSpecContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def optimization(self):
            return self.getTypedRuleContext(FunctionalStripsParser.OptimizationContext,0)

        def metricFExp(self):
            return self.getTypedRuleContext(FunctionalStripsParser.MetricFExpContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterProblemMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitProblemMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitProblemMetric(self)
            else:
                return visitor.visitChildren(self)



    def metricSpec(self):

        localctx = FunctionalStripsParser.MetricSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_metricSpec)
        try:
            localctx = FunctionalStripsParser.ProblemMetricContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            self.match(FunctionalStripsParser.T__0)
            self.state = 1060
            self.match(FunctionalStripsParser.T__76)
            self.state = 1061
            self.optimization()
            self.state = 1062
            self.metricFExp()
            self.state = 1063
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptimizationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_optimization

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterOptimization(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitOptimization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitOptimization(self)
            else:
                return visitor.visitChildren(self)




    def optimization(self):

        localctx = FunctionalStripsParser.OptimizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_optimization)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            _la = self._input.LA(1)
            if not(_la==FunctionalStripsParser.T__77 or _la==FunctionalStripsParser.T__78):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MetricFExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_metricFExp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FunctionalExprMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterFunctionalExprMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitFunctionalExprMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitFunctionalExprMetric(self)
            else:
                return visitor.visitChildren(self)


    class CompositeMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def terminalCost(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TerminalCostContext,0)

        def stageCost(self):
            return self.getTypedRuleContext(FunctionalStripsParser.StageCostContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterCompositeMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitCompositeMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitCompositeMetric(self)
            else:
                return visitor.visitChildren(self)


    class IsViolatedMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(FunctionalStripsParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterIsViolatedMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitIsViolatedMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitIsViolatedMetric(self)
            else:
                return visitor.visitChildren(self)


    class TotalTimeMetricContext(MetricFExpContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.MetricFExpContext)
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTotalTimeMetric(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTotalTimeMetric(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTotalTimeMetric(self)
            else:
                return visitor.visitChildren(self)



    def metricFExp(self):

        localctx = FunctionalStripsParser.MetricFExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_metricFExp)
        try:
            self.state = 1079
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.FunctionalExprMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.functionTerm()
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.CompositeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1068
                self.terminalCost()
                self.state = 1069
                self.stageCost()
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.CompositeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.stageCost()
                self.state = 1072
                self.terminalCost()
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.TotalTimeMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1074
                self.match(FunctionalStripsParser.T__79)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.IsViolatedMetricContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1075
                self.match(FunctionalStripsParser.T__0)
                self.state = 1076
                self.match(FunctionalStripsParser.T__80)
                self.state = 1077
                self.match(FunctionalStripsParser.NAME)
                self.state = 1078
                self.match(FunctionalStripsParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminalCostContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_terminalCost

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterTerminalCost(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitTerminalCost(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitTerminalCost(self)
            else:
                return visitor.visitChildren(self)




    def terminalCost(self):

        localctx = FunctionalStripsParser.TerminalCostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_terminalCost)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(FunctionalStripsParser.T__0)
            self.state = 1082
            self.match(FunctionalStripsParser.T__81)
            self.state = 1083
            self.functionTerm()
            self.state = 1084
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StageCostContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTerm(self):
            return self.getTypedRuleContext(FunctionalStripsParser.FunctionTermContext,0)


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_stageCost

        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterStageCost(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitStageCost(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitStageCost(self)
            else:
                return visitor.visitChildren(self)




    def stageCost(self):

        localctx = FunctionalStripsParser.StageCostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_stageCost)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.match(FunctionalStripsParser.T__0)
            self.state = 1087
            self.match(FunctionalStripsParser.T__82)
            self.state = 1088
            self.functionTerm()
            self.state = 1089
            self.match(FunctionalStripsParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConGDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return FunctionalStripsParser.RULE_conGD

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ForallConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def typedVariableList(self):
            return self.getTypedRuleContext(FunctionalStripsParser.TypedVariableListContext,0)

        def conGD(self):
            return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterForallConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitForallConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitForallConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlwaysConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAlwaysConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAlwaysConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAlwaysConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AtEndConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtEndConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtEndConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtEndConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ConjunctiveConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def conGD(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.ConGDContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.ConGDContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterConjunctiveConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitConjunctiveConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitConjunctiveConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSometimeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSometimeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSometimeConstraint(self)
            else:
                return visitor.visitChildren(self)


    class WithinConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterWithinConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitWithinConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitWithinConstraint(self)
            else:
                return visitor.visitChildren(self)


    class HoldAfterConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterHoldAfterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitHoldAfterConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitHoldAfterConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeBeforeConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSometimeBeforeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSometimeBeforeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSometimeBeforeConstraint(self)
            else:
                return visitor.visitChildren(self)


    class SometimeAfterConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterSometimeAfterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitSometimeAfterConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitSometimeAfterConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ExtensionalConstraintGDContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTNAME(self):
            return self.getToken(FunctionalStripsParser.EXTNAME, 0)
        def groundFunctionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GroundFunctionTermContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GroundFunctionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterExtensionalConstraintGD(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitExtensionalConstraintGD(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitExtensionalConstraintGD(self)
            else:
                return visitor.visitChildren(self)


    class HoldDuringConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(FunctionalStripsParser.NUMBER)
            else:
                return self.getToken(FunctionalStripsParser.NUMBER, i)
        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterHoldDuringConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitHoldDuringConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitHoldDuringConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlwaysWithinConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(FunctionalStripsParser.NUMBER, 0)
        def goalDesc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FunctionalStripsParser.GoalDescContext)
            else:
                return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAlwaysWithinConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAlwaysWithinConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAlwaysWithinConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AlternativeAlwaysConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAlternativeAlwaysConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAlternativeAlwaysConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAlternativeAlwaysConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AtMostOnceConstraintContext(ConGDContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a FunctionalStripsParser.ConGDContext)
            super().__init__(parser)
            self.copyFrom(ctx)

        def goalDesc(self):
            return self.getTypedRuleContext(FunctionalStripsParser.GoalDescContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.enterAtMostOnceConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if isinstance( listener, FunctionalStripsListener ):
                listener.exitAtMostOnceConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if isinstance( visitor, FunctionalStripsVisitor ):
                return visitor.visitAtMostOnceConstraint(self)
            else:
                return visitor.visitChildren(self)



    def conGD(self):

        localctx = FunctionalStripsParser.ConGDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_conGD)
        self._la = 0 # Token type
        try:
            self.state = 1177
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                localctx = FunctionalStripsParser.ConjunctiveConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.match(FunctionalStripsParser.T__0)
                self.state = 1092
                self.match(FunctionalStripsParser.T__21)
                self.state = 1094 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1093
                    self.conGD()
                    self.state = 1096 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FunctionalStripsParser.T__0):
                        break

                self.state = 1098
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 2:
                localctx = FunctionalStripsParser.ForallConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.match(FunctionalStripsParser.T__0)
                self.state = 1101
                self.match(FunctionalStripsParser.T__26)
                self.state = 1102
                self.match(FunctionalStripsParser.T__0)
                self.state = 1103
                self.typedVariableList()
                self.state = 1104
                self.match(FunctionalStripsParser.T__2)
                self.state = 1105
                self.conGD()
                self.state = 1106
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 3:
                localctx = FunctionalStripsParser.AtEndConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.match(FunctionalStripsParser.T__0)
                self.state = 1109
                self.match(FunctionalStripsParser.T__33)
                self.state = 1110
                self.match(FunctionalStripsParser.T__36)
                self.state = 1111
                self.goalDesc()
                self.state = 1112
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 4:
                localctx = FunctionalStripsParser.AlwaysConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1114
                self.match(FunctionalStripsParser.T__0)
                self.state = 1115
                self.match(FunctionalStripsParser.T__83)
                self.state = 1116
                self.goalDesc()
                self.state = 1117
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 5:
                localctx = FunctionalStripsParser.SometimeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1119
                self.match(FunctionalStripsParser.T__0)
                self.state = 1120
                self.match(FunctionalStripsParser.T__84)
                self.state = 1121
                self.goalDesc()
                self.state = 1122
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 6:
                localctx = FunctionalStripsParser.WithinConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1124
                self.match(FunctionalStripsParser.T__0)
                self.state = 1125
                self.match(FunctionalStripsParser.T__85)
                self.state = 1126
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1127
                self.goalDesc()
                self.state = 1128
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 7:
                localctx = FunctionalStripsParser.AtMostOnceConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1130
                self.match(FunctionalStripsParser.T__0)
                self.state = 1131
                self.match(FunctionalStripsParser.T__86)
                self.state = 1132
                self.goalDesc()
                self.state = 1133
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 8:
                localctx = FunctionalStripsParser.SometimeAfterConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1135
                self.match(FunctionalStripsParser.T__0)
                self.state = 1136
                self.match(FunctionalStripsParser.T__87)
                self.state = 1137
                self.goalDesc()
                self.state = 1138
                self.goalDesc()
                self.state = 1139
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 9:
                localctx = FunctionalStripsParser.SometimeBeforeConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1141
                self.match(FunctionalStripsParser.T__0)
                self.state = 1142
                self.match(FunctionalStripsParser.T__88)
                self.state = 1143
                self.goalDesc()
                self.state = 1144
                self.goalDesc()
                self.state = 1145
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 10:
                localctx = FunctionalStripsParser.AlwaysWithinConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1147
                self.match(FunctionalStripsParser.T__0)
                self.state = 1148
                self.match(FunctionalStripsParser.T__89)
                self.state = 1149
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1150
                self.goalDesc()
                self.state = 1151
                self.goalDesc()
                self.state = 1152
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 11:
                localctx = FunctionalStripsParser.HoldDuringConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1154
                self.match(FunctionalStripsParser.T__0)
                self.state = 1155
                self.match(FunctionalStripsParser.T__90)
                self.state = 1156
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1157
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1158
                self.goalDesc()
                self.state = 1159
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 12:
                localctx = FunctionalStripsParser.HoldAfterConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1161
                self.match(FunctionalStripsParser.T__0)
                self.state = 1162
                self.match(FunctionalStripsParser.T__91)
                self.state = 1163
                self.match(FunctionalStripsParser.NUMBER)
                self.state = 1164
                self.goalDesc()
                self.state = 1165
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 13:
                localctx = FunctionalStripsParser.ExtensionalConstraintGDContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1167
                self.match(FunctionalStripsParser.T__0)
                self.state = 1168
                self.match(FunctionalStripsParser.EXTNAME)
                self.state = 1170 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1169
                    self.groundFunctionTerm()
                    self.state = 1172 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==FunctionalStripsParser.T__0):
                        break

                self.state = 1174
                self.match(FunctionalStripsParser.T__2)
                pass

            elif la_ == 14:
                localctx = FunctionalStripsParser.AlternativeAlwaysConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1176
                self.goalDesc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx




